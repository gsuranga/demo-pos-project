/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.customer_returns;

import controllers.DealerReturnController;
import controllers.CustomerReturnsController;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.ReturnsSales;
import utilities_new.Combosearch;
import views.purchaseorderviws.DeliveredItems;

/**
 *
 * @author insaf
 */
public class ReturnPanel extends javax.swing.JPanel {

    DefaultTableModel dtm, dtm2, dtm3, completedReturnsDtm, notDeliveredReturnsDtm;
    public String mainsalesorderid;
    private Combosearch salesOrdercmb1, customercmb1;
    private static Map<Object, Object> cmbindex;

    /**
     * Creates new form ReturnPanel
     */
    public ReturnPanel() {
        initComponents();
        cmbindex = new HashMap<>();

        dtm = (DefaultTableModel) oldsalesordertable.getModel();
        dtm2 = (DefaultTableModel) returntable.getModel();
        dtm3 = (DefaultTableModel) returnInvoiceTable.getModel();
        completedReturnsDtm = (DefaultTableModel) tblCompletedReturns.getModel();
        notDeliveredReturnsDtm = (DefaultTableModel) tblNotDeliveredReturns.getModel();

        salesOrdercmb1 = new Combosearch();
        customercmb1 = new Combosearch();
        getAllSalesOrder();
        getAllCustomerName();
        try {
            DealerReturnController.loadAllCompletedReturns(completedReturnsDtm);
            DealerReturnController.loadAllNotSentDealerReturns(notDeliveredReturnsDtm);
        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
        }
        salesOrdercmb1.setSearchableCombo(salesOrdercmb, true, "Invalied Order");
        customercmb1.setSearchableCombo(customercmb, true, "Invalied Customer");
        selectCustomerButtonGroup.add(nameRadioButton);
        selectCustomerButtonGroup.add(accnoRadioButton);

        getSalesOrderForReturn();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        selectCustomerButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnreturnsearch = new javax.swing.JButton();
        salesOrdercmb = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        oldsalesordertable = new javax.swing.JTable();
        totalField = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        qtyField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        reasonfield = new javax.swing.JTextArea();
        forwardButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        returntable = new javax.swing.JTable();
        submitButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        nameRadioButton = new javax.swing.JRadioButton();
        accnoRadioButton = new javax.swing.JRadioButton();
        customercmb = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        returnInvoiceTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCompletedReturns = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblNotDeliveredReturns = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();

        jLabel1.setText("Invoice No:");

        btnreturnsearch.setText("Search");
        btnreturnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreturnsearchActionPerformed(evt);
            }
        });

        salesOrdercmb.setEditable(true);
        salesOrdercmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                salesOrdercmbItemStateChanged(evt);
            }
        });
        salesOrdercmb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                salesOrdercmbKeyReleased(evt);
            }
        });

        oldsalesordertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Part No", "Description", "Quantity", "Unit Price", "Discount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(oldsalesordertable);
        if (oldsalesordertable.getColumnModel().getColumnCount() > 0) {
            oldsalesordertable.getColumnModel().getColumn(0).setMinWidth(0);
            oldsalesordertable.getColumnModel().getColumn(0).setPreferredWidth(0);
            oldsalesordertable.getColumnModel().getColumn(0).setMaxWidth(0);
            oldsalesordertable.getColumnModel().getColumn(1).setResizable(false);
            oldsalesordertable.getColumnModel().getColumn(2).setResizable(false);
            oldsalesordertable.getColumnModel().getColumn(3).setResizable(false);
            oldsalesordertable.getColumnModel().getColumn(4).setResizable(false);
            oldsalesordertable.getColumnModel().getColumn(5).setResizable(false);
        }

        totalField.setFont(new java.awt.Font("Droid Sans", 0, 24)); // NOI18N
        totalField.setForeground(new java.awt.Color(104, 94, 94));
        totalField.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalField.setText("0.00");
        totalField.setVerifyInputWhenFocusTarget(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Total return Amount");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Qty");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Reason:");

        reasonfield.setColumns(20);
        reasonfield.setRows(5);
        jScrollPane3.setViewportView(reasonfield);

        forwardButton.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        forwardButton.setText("Add To Return");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        returntable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Description", "Quantity", "Reason", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(returntable);
        if (returntable.getColumnModel().getColumnCount() > 0) {
            returntable.getColumnModel().getColumn(0).setMinWidth(0);
            returntable.getColumnModel().getColumn(0).setPreferredWidth(0);
            returntable.getColumnModel().getColumn(0).setMaxWidth(0);
            returntable.getColumnModel().getColumn(1).setResizable(false);
            returntable.getColumnModel().getColumn(2).setResizable(false);
            returntable.getColumnModel().getColumn(3).setResizable(false);
            returntable.getColumnModel().getColumn(4).setMinWidth(0);
            returntable.getColumnModel().getColumn(4).setPreferredWidth(0);
            returntable.getColumnModel().getColumn(4).setMaxWidth(0);
        }

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(salesOrdercmb, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnreturnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1029, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(qtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(forwardButton)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(566, 566, 566)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(55, 55, 55))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salesOrdercmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(11, 11, 11))
                    .addComponent(btnreturnsearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forwardButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1117, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("New", jPanel1);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(108, 199, 215)));

        nameRadioButton.setText("Name");
        nameRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameRadioButtonActionPerformed(evt);
            }
        });

        accnoRadioButton.setText("Account Number");
        accnoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accnoRadioButtonActionPerformed(evt);
            }
        });

        customercmb.setEditable(true);
        customercmb.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        customercmb.setForeground(new java.awt.Color(52, 110, 173));
        customercmb.setMaximumRowCount(20);
        customercmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        customercmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customercmbActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(customercmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(accnoRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(customercmb))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(nameRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accnoRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        returnInvoiceTable.setBackground(new java.awt.Color(161, 254, 221));
        returnInvoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Invoice Number", "Invoice Amount", "Return Amount", "New Cash Amount", "New Deb Amount", "New Invoice Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        returnInvoiceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnInvoiceTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(returnInvoiceTable);
        if (returnInvoiceTable.getColumnModel().getColumnCount() > 0) {
            returnInvoiceTable.getColumnModel().getColumn(0).setMinWidth(0);
            returnInvoiceTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            returnInvoiceTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(" Summery", jPanel6);

        jTabbedPane3.addTab("Customer Returns", jTabbedPane1);

        tblCompletedReturns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Supplier", "deliver order id", "invoice date", "time", "amount", "Invoice", "WIP NO", "-", "return id", "supplier id", "-", "Date", "Time", "return id", "complete", "-", "-"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblCompletedReturns);
        if (tblCompletedReturns.getColumnModel().getColumnCount() > 0) {
            tblCompletedReturns.getColumnModel().getColumn(1).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(1).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(1).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(2).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(2).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(2).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(3).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(3).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(4).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(4).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(7).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(7).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(8).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(8).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(8).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(9).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(9).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(9).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(10).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(10).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(10).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(13).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(13).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(13).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(14).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(14).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(14).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(15).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(15).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(15).setMaxWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(16).setMinWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(16).setPreferredWidth(0);
            tblCompletedReturns.getColumnModel().getColumn(16).setMaxWidth(0);
        }

        jButton1.setText("New Return");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(791, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(41, 41, 41))
        );

        jTabbedPane4.addTab("All Returns", jPanel2);

        tblNotDeliveredReturns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Supplier", "deliver order id", "invoice date", "time", "amount", "Invoice", "WIP NO", "-", "return id", "supplier id", "-", "Date", "Time", "return id", "complete", "-", "-"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblNotDeliveredReturns);
        if (tblNotDeliveredReturns.getColumnModel().getColumnCount() > 0) {
            tblNotDeliveredReturns.getColumnModel().getColumn(1).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(1).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(1).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(2).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(2).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(2).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(3).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(3).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(4).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(4).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(7).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(7).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(8).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(8).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(8).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(9).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(9).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(9).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(10).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(10).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(10).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(13).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(13).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(13).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(14).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(14).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(14).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(15).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(15).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(15).setMaxWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(16).setMinWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(16).setPreferredWidth(0);
            tblNotDeliveredReturns.getColumnModel().getColumn(16).setMaxWidth(0);
        }

        jButton3.setText("Resend");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(895, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1015, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addGap(40, 40, 40)
                .addComponent(jButton3)
                .addGap(42, 42, 42))
        );

        jTabbedPane4.addTab("Not Delivered", jPanel3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1086, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 637, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("Recieved", jPanel5);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addGap(41, 41, 41))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Dealer Returns", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        int rows = dtm2.getRowCount();
        if (rows > 0) {
            ReturnsSales mainReturnsales = new ReturnsSales();

            mainReturnsales.setDate(setDateTime());
            mainReturnsales.setTime(setTime());
            mainReturnsales.setSalesorderid(mainsalesorderid);
            mainReturnsales.setAmount(Double.parseDouble(totalField.getText()));

            ArrayList<ReturnsSales> subReturn = new ArrayList<>();

            for (int i = 0; i < rows; i++) {
                ReturnsSales returnsSales = new ReturnsSales();
                //returnsSales.setSalesorderid(salesorderID);
                returnsSales.setItem_id(Integer.parseInt(String.valueOf(returntable.getValueAt(i, 0))));
                returnsSales.setQty(Double.parseDouble(String.valueOf(returntable.getValueAt(i, 2))));
                returnsSales.setReason(String.valueOf(returntable.getValueAt(i, 3)));
                returnsSales.setUnit_price(Double.parseDouble(String.valueOf(returntable.getValueAt(i, 4))));
                subReturn.add(returnsSales);

                //System.out.println(returntable.getValueAt(i,1));
            }
            System.out.println(mainsalesorderid);
            boolean re = CustomerReturnsController.addCustomerReturnOrder(mainReturnsales, subReturn);
            if (re == true) {
                JOptionPane.showMessageDialog(null, "Returned Order");
                dtm2.setRowCount(0);
                dtm.setRowCount(0);
                totalField.setText("0.00");
            } else {
                JOptionPane.showMessageDialog(null, "Not Returned");
            }
        }else{
            JOptionPane.showMessageDialog(null,"No selected Parts");
        }

        //System.out.println(rows);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        int selectedRow = oldsalesordertable.getSelectedRow();

        if (qtyField.getText().equals("") | selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Cant Return");
            qtyField.setText("");
        } else {
            double qtyf = Double.parseDouble(qtyField.getText());
            String reason = reasonfield.getText();
            // System.out.println(getDataforReturn[1]);

            Object getDataforReturn[] = {dtm.getValueAt(selectedRow, 0), dtm.getValueAt(selectedRow, 2), qtyf, reason, dtm.getValueAt(selectedRow, 4)};
            dtm2.addRow(getDataforReturn);
            double tot = 0;
            for (int i = 0; i < dtm2.getRowCount(); i++) {
                double unit_price = Double.parseDouble(String.valueOf(dtm2.getValueAt(i, 4)));
                double qt = Double.parseDouble(String.valueOf(dtm2.getValueAt(i, 2)));
                tot += unit_price * qt;
                System.out.println(unit_price * qt);
            }
            totalField.setText(String.valueOf(tot));
            qtyField.setText("");
            reasonfield.setText("");
        }
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void salesOrdercmbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salesOrdercmbKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnreturnsearch.doClick();
        }
    }//GEN-LAST:event_salesOrdercmbKeyReleased

    private void salesOrdercmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_salesOrdercmbItemStateChanged

    }//GEN-LAST:event_salesOrdercmbItemStateChanged

    private void btnreturnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreturnsearchActionPerformed
        try {
            dtm.setRowCount(0);
            dtm2.setRowCount(0);
            String salesorderid = salesOrdercmb.getSelectedItem().toString();
            ReturnsSales returnsSales = new ReturnsSales(salesorderid);
            ArrayList<ReturnsSales> salesForReturn = CustomerReturnsController.getSalesForReturn(returnsSales);
            System.out.println(salesForReturn);
            for (ReturnsSales rs : salesForReturn) {
                mainsalesorderid = rs.getSalesorderid();
                // System.out.println(rs.getSalesorderid());
                Object myRow[] = {rs.getItem_id(), rs.getPart_nu(), rs.getDescription(), rs.getUnit_price(), rs.getQty(), rs.getDiscount()};
                dtm.addRow(myRow);
                System.out.println();
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnreturnsearchActionPerformed

    private void nameRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameRadioButtonActionPerformed
        customercmb.removeAllItems();
        getAllCustomerName();
    }//GEN-LAST:event_nameRadioButtonActionPerformed

    private void accnoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accnoRadioButtonActionPerformed
        customercmb.removeAllItems();
        getAllCustomerAccountNumber();
    }//GEN-LAST:event_accnoRadioButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        cmbindex.size();
        dtm3.setRowCount(0);
        //System.out.println(cmbindex.get(String.valueOf(customercmb.getSelectedIndex() + 1)));
        if (String.valueOf(cmbindex.get(String.valueOf(customercmb.getSelectedIndex() + 1))).equals("all")) {
            getSalesOrderForReturn();
        } else {
            int cus_id = (int) cmbindex.get(String.valueOf(customercmb.getSelectedIndex() + 1));
            try {
                CustomerReturnsController.getSalesOrderbyCustomer(cus_id, dtm3);
            } catch (SQLException s) {

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //System.out.println(cmbindex.get(5));
    }//GEN-LAST:event_searchButtonActionPerformed

    private void returnInvoiceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnInvoiceTableMouseClicked
        if (evt.getClickCount() == 2) {
            int selectedRow = returnInvoiceTable.getSelectedRow();
            int order_id = (int) dtm3.getValueAt(selectedRow, 0);
            ReturnDetailDialog returnDetailDialog = new ReturnDetailDialog(null, true, order_id);
            returnDetailDialog.setLocationRelativeTo(this);
            returnDetailDialog.setVisible(true);
        }
    }//GEN-LAST:event_returnInvoiceTableMouseClicked

    private void customercmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customercmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customercmbActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selected = tblNotDeliveredReturns.getSelectedRow();
        int returnID = Integer.parseInt(tblNotDeliveredReturns.getValueAt(selected, 8).toString());
        String invoiceNo = tblNotDeliveredReturns.getValueAt(selected, 5).toString();
        double wipNo = Double.parseDouble(tblNotDeliveredReturns.getValueAt(selected, 6).toString());
        //DeliveredItems.sendDealerReturnsAsaJson(returnID, invoiceNo, wipNo);
        try {
            DealerReturnController.loadAllNotSentDealerReturns(notDeliveredReturnsDtm);
        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // NewReturn  nr = new New Return();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton accnoRadioButton;
    private javax.swing.JButton btnreturnsearch;
    private javax.swing.JComboBox customercmb;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JRadioButton nameRadioButton;
    private javax.swing.JTable oldsalesordertable;
    private javax.swing.JTextField qtyField;
    private javax.swing.JTextArea reasonfield;
    private javax.swing.JTable returnInvoiceTable;
    private javax.swing.JTable returntable;
    private javax.swing.JComboBox salesOrdercmb;
    private javax.swing.JButton searchButton;
    private javax.swing.ButtonGroup selectCustomerButtonGroup;
    private javax.swing.JButton submitButton;
    private javax.swing.JTable tblCompletedReturns;
    private javax.swing.JTable tblNotDeliveredReturns;
    private javax.swing.JLabel totalField;
    // End of variables declaration//GEN-END:variables

    private String setDateTime() {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        String year = timeStamp.substring(0, 4);
        String month = timeStamp.substring(4, 6);
        String date = timeStamp.substring(6, 8);
        String hour = timeStamp.substring(9, 11);
        String minute = timeStamp.substring(11, 13);
        String second = timeStamp.substring(13, 15);

        String systemDate = year + "-" + month + "-" + date;

        // String systemTime = hour + ":" + minute + ":" + second;
        return systemDate;
    }

    private String setTime() {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        String year = timeStamp.substring(0, 4);
        String month = timeStamp.substring(4, 6);
        String date = timeStamp.substring(6, 8);
        String hour = timeStamp.substring(9, 11);
        String minute = timeStamp.substring(11, 13);
        String second = timeStamp.substring(13, 15);

        // String systemDate = year + "-" + month + "-" + date;
        String systemTime = hour + ":" + minute + ":" + second;
        return systemTime;
    }

    private void getAllSalesOrder() {
        try {
            ArrayList<ReturnsSales> allSalessOrder = CustomerReturnsController.getAllSalessOrder();
            for (ReturnsSales rs : allSalessOrder) {
                salesOrdercmb.addItem(rs.getSalesorderid());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getAllCustomerName() {
        cmbindex.clear();
        cmbindex.put("1", "all");
        try {
            ArrayList<ReturnsSales> allCustomer = CustomerReturnsController.getAllCustomer();
            for (ReturnsSales r : allCustomer) {

                customercmb.addItem(String.format("%-25s", r.getCus_name()) + "   " + r.getCus_account_nu());
                int itemCount = customercmb.getItemCount();
                //System.out.println(itemCount);
                cmbindex.put(String.valueOf(itemCount), r.getCus_id());

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getAllCustomerAccountNumber() {
        cmbindex.clear();
        cmbindex.put("1", "all");

        try {
            ArrayList<ReturnsSales> allCustomer = CustomerReturnsController.getAllCustomer();
            for (ReturnsSales r : allCustomer) {
                //  System.out.println(String.format("%10s", "foo"));  ;
                customercmb.addItem(String.format("%-25s", r.getCus_account_nu()) + "   " + r.getCus_name());
                int itemCount = customercmb.getItemCount();
                //System.out.println(itemCount);
                cmbindex.put(String.valueOf(itemCount), r.getCus_id());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getSalesOrderForReturn() {
        try {
            CustomerReturnsController.getSalesOrderForReturn(dtm3);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReturnPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
