/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.estimate;

import controllers.EstimateController;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author insaf
 */
public class EstimatePanel extends javax.swing.JPanel {
    
    DefaultTableModel dtm;
    JasperReport estimateReport;
    DefaultTableModel dtm2;
     Map<Object, Object> cusid;
    

    /**
     * Creates new form Estimate
     */
    public EstimatePanel() {
        try {
            initComponents();
            cusid=new HashMap<>();
            loadcustomer();
            mainbuttongroup.add(percentage);
            mainbuttongroup.add(rupee);
            rupee.setSelected(true);

            dtm = (DefaultTableModel) estimateTable.getModel();
            dtm2 = (DefaultTableModel) itemdetail.getModel();
            loadItemForCombo();
            discountfield.setText("0");
            estimateddate.setDate(new Date());
            estimateReport = JasperCompileManager.compileReport("./src/views/report/newestimate.jrxml");
        } catch (JRException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainbuttongroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        qtyField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        netAmountFiel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        subtotalField = new javax.swing.JLabel();
        addbutton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        estimateTable = new javax.swing.JTable();
        printButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        customernamecombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        accountnumbercombo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemdetail = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        itemsearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        discountfield = new javax.swing.JTextField();
        percentage = new javax.swing.JRadioButton();
        rupee = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        estimateddate = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Droid Sans", 1, 14)); // NOI18N
        jLabel2.setText("Qty");

        qtyField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        qtyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyFieldActionPerformed(evt);
            }
        });
        qtyField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyFieldKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        jLabel3.setText("Net Amount  (Rs)");

        netAmountFiel.setFont(new java.awt.Font("Droid Sans", 0, 36)); // NOI18N
        netAmountFiel.setForeground(new java.awt.Color(127, 21, 21));
        netAmountFiel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        netAmountFiel.setText("0.00");

        jLabel6.setForeground(new java.awt.Color(16, 221, 28));
        jLabel6.setText("SUB TOTAL");

        subtotalField.setFont(new java.awt.Font("Droid Sans", 2, 14)); // NOI18N
        subtotalField.setForeground(new java.awt.Color(67, 190, 26));
        subtotalField.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subtotalField.setText("0.00");

        addbutton.setText("Add Item");
        addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbuttonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        estimateTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        estimateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Part Number", "Description", "Unit Price", "Qty", "Discount", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        estimateTable.getTableHeader().setReorderingAllowed(false);
        estimateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                estimateTableMouseClicked(evt);
            }
        });
        estimateTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                estimateTableFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(estimateTable);

        printButton.setFont(new java.awt.Font("Droid Sans", 1, 24)); // NOI18N
        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Delete");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer"));

        customernamecombo.setFont(new java.awt.Font("Droid Sans", 2, 14)); // NOI18N
        customernamecombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customernamecomboMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                customernamecomboMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                customernamecomboMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customernamecomboMouseReleased(evt);
            }
        });
        customernamecombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customernamecomboItemStateChanged(evt);
            }
        });
        customernamecombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customernamecomboActionPerformed(evt);
            }
        });
        customernamecombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                customernamecomboPropertyChange(evt);
            }
        });
        customernamecombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customernamecomboKeyReleased(evt);
            }
        });

        jLabel4.setText("Name :");

        jLabel5.setText("Account No:");

        accountnumbercombo.setFont(new java.awt.Font("Droid Sans", 2, 14)); // NOI18N
        accountnumbercombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                accountnumbercomboItemStateChanged(evt);
            }
        });
        accountnumbercombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountnumbercomboActionPerformed(evt);
            }
        });
        accountnumbercombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                accountnumbercomboKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customernamecombo, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountnumbercombo, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(customernamecombo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(accountnumbercombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        itemdetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Search Key", "Part No", "Description", "unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(itemdetail);
        if (itemdetail.getColumnModel().getColumnCount() > 0) {
            itemdetail.getColumnModel().getColumn(0).setResizable(false);
            itemdetail.getColumnModel().getColumn(1).setResizable(false);
            itemdetail.getColumnModel().getColumn(2).setResizable(false);
            itemdetail.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel7.setText("search Item:");

        itemsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemsearchKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 11)); // NOI18N
        jLabel1.setText("Discount");

        discountfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discountfieldKeyReleased(evt);
            }
        });

        percentage.setText("%");
        percentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageActionPerformed(evt);
            }
        });

        rupee.setText("Rs");

        jLabel8.setText("Estimated Date:");

        estimateddate.setDateFormatString("yyyy-MM-dd");

        jButton1.setText("View Estimate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemsearch))
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(discountfield)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(qtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(subtotalField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(netAmountFiel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rupee)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(percentage)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addGap(74, 74, 74)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(estimateddate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(estimateddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(itemsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentage)
                    .addComponent(rupee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(qtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(subtotalField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(discountfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(netAmountFiel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addbutton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(printButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void estimateTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_estimateTableMouseClicked
        // btRemove.setEnabled(true);
    }//GEN-LAST:event_estimateTableMouseClicked

    private void estimateTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_estimateTableFocusLost
        // btRemove.setEnabled(false);
    }//GEN-LAST:event_estimateTableFocusLost

    private void qtyFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (itemdetail.getSelectedRowCount() > 0) {
                addbutton.doClick();
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Item First");
            }

//
//            int selectedRow = itemdetail.getSelectedRow();
//            String searck_key = String.valueOf(itemdetail.getValueAt(selectedRow, 0));
//            String part = String.valueOf(itemdetail.getValueAt(selectedRow, 1));
//            String description = String.valueOf(itemdetail.getValueAt(selectedRow, 2));
//            double unit_price = Double.parseDouble(String.valueOf(itemdetail.getValueAt(selectedRow, 3)));
//            int qty = Integer.parseInt(qtyField.getText());
//            double discountamount = Double.parseDouble(discountfield.getText());
//            if (rupee.isSelected() == true) {
//                subtotalField.setText(String.valueOf((unit_price - discountamount) * qty));
//
//                qtyField.setText("");
//                discountfield.setText("0");
//
//                Object data[] = {searck_key, part, description, unit_price, qty, discountamount, (unit_price - discountamount) * qty};
//                dtm.addRow(data);
//                double totalAmount = 0;
//                for (int i = 0; i < dtm.getRowCount(); i++) {
//                    totalAmount += (double) dtm.getValueAt(i, 6);
//                }
//                netAmountFiel.setText(String.valueOf(totalAmount));
//                System.out.println(part);
//            } else {
//                subtotalField.setText(String.valueOf((unit_price - (unit_price * discountamount / 100)) * qty));
//
//                qtyField.setText("");
//                discountfield.setText("0");
//
//                Object data[] = {searck_key, part, description, unit_price, qty, unit_price * discountamount / 100, (unit_price - (unit_price * discountamount / 100)) * qty};
//                dtm.addRow(data);
//                double totalAmount = 0;
//                for (int i = 0; i < dtm.getRowCount(); i++) {
//                    totalAmount += (double) dtm.getValueAt(i, 6);
//                }
//                netAmountFiel.setText(String.valueOf(totalAmount));
//                System.out.println(part);
//            }
//
////            String dat = (String) item_combo.getSelectedItem();
////            String[] split = dat.split("   ");
//            //System.out.println(split[3]);
//            /*  double unitPrice = Double.parseDouble(split[3]);
//             double qty = Double.parseDouble(qtyField.getText());
//             double subtot = unitPrice * qty;
//             subtotalField.setText(String.valueOf(subtot));
//             Object row[] = {split[0], split[1], split[2], Double.parseDouble(split[3]), Integer.parseInt(qtyField.getText()), subtot};
//             dtm.addRow(row);
//             double totalAmount = 0;
//             for (int i = 0; i < dtm.getRowCount(); i++) {
//             totalAmount += (double) dtm.getValueAt(i, 5);
//             }
//             netAmountFiel.setText(String.valueOf(totalAmount));
//             item_combo.requestFocus();
//             qtyField.setText("");*/
        }
    }//GEN-LAST:event_qtyFieldKeyReleased

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (estimateTable.getSelectedRowCount() > 0) {
            int selectedRow = estimateTable.getSelectedRow();
            dtm.removeRow(selectedRow);
            countTotal();
        } else {
            JOptionPane.showMessageDialog(this, "Please Select Item First");
        }

    }//GEN-LAST:event_removeButtonActionPerformed

    private void addbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbuttonActionPerformed
//        int selectedRow = itemdetail.getSelectedRow();
//        String searck_key = String.valueOf(itemdetail.getValueAt(selectedRow, 0));
//        String part = String.valueOf(itemdetail.getValueAt(selectedRow, 1));
//        String description = String.valueOf(itemdetail.getValueAt(selectedRow, 2));
//        double unit_price = Double.parseDouble(String.valueOf(itemdetail.getValueAt(selectedRow, 3)));
//        int qty = Integer.parseInt(qtyField.getText());
//        subtotalField.setText(String.valueOf(unit_price * qty));
//        qtyField.setText("");
//        Object data[] = {searck_key, part, description, unit_price, qty, qty * unit_price};
//        dtm.addRow(data);
//        double totalAmount = 0;
//        for (int i = 0; i < dtm.getRowCount(); i++) {
//            totalAmount += (double) dtm.getValueAt(i, 5);
//        }
//        netAmountFiel.setText(String.valueOf(totalAmount));
//        System.out.println(part);
        /* String dat = (String) item_combo.getSelectedItem();
         String[] split = dat.split("   ");
         System.out.println(split[3]);
         double unitPrice = Double.parseDouble(split[3]);
         double qty = Double.parseDouble(qtyField.getText());
         double subtot = unitPrice * qty;

         subtotalField.setText(String.valueOf(subtot));
         Object row[] = {split[0], split[1], split[2], Double.parseDouble(split[3]), Integer.parseInt(qtyField.getText()), subtot};
         dtm.addRow(row);
         countTotal();*/

        //----------------------------NEW-------------------------
        // if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        if (qtyField.getText().isEmpty() | discountfield.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "discount or quntity can't be empty");
        } else {
            if (itemdetail.getSelectedRowCount() > 0) {
                int selectedRow = itemdetail.getSelectedRow();
                String searck_key = String.valueOf(itemdetail.getValueAt(selectedRow, 0));
                String part = String.valueOf(itemdetail.getValueAt(selectedRow, 1));
                String description = String.valueOf(itemdetail.getValueAt(selectedRow, 2));
                double unit_price = Double.parseDouble(String.valueOf(itemdetail.getValueAt(selectedRow, 3)));
                int qty = Integer.parseInt(qtyField.getText());
                double discountamount = Double.parseDouble(discountfield.getText());
                if (rupee.isSelected() == true) {
                    subtotalField.setText(String.valueOf((unit_price - discountamount) * qty));

                    qtyField.setText("");
                    discountfield.setText("0");

                    Object data[] = {searck_key, part, description, unit_price, qty, discountamount, (unit_price - discountamount) * qty};
                    dtm.addRow(data);
                    double totalAmount = 0;
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        totalAmount += (double) dtm.getValueAt(i, 6);
                    }
                    netAmountFiel.setText(String.valueOf(totalAmount));
                    System.out.println(part);
                } else {
                    subtotalField.setText(String.valueOf((unit_price - (unit_price * discountamount / 100)) * qty));

                    qtyField.setText("");
                    discountfield.setText("0");

                    Object data[] = {searck_key, part, description, unit_price, qty, unit_price * discountamount / 100, (unit_price - (unit_price * discountamount / 100)) * qty};
                    dtm.addRow(data);
                    double totalAmount = 0;
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        totalAmount += (double) dtm.getValueAt(i, 6);
                    }
                    netAmountFiel.setText(String.valueOf(totalAmount));
                    System.out.println(part);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Item First");
            }

        }

//            String dat = (String) item_combo.getSelectedItem();
//            String[] split = dat.split("   ");
        //System.out.println(split[3]);
            /*  double unitPrice = Double.parseDouble(split[3]);
         double qty = Double.parseDouble(qtyField.getText());
         double subtot = unitPrice * qty;
         subtotalField.setText(String.valueOf(subtot));
         Object row[] = {split[0], split[1], split[2], Double.parseDouble(split[3]), Integer.parseInt(qtyField.getText()), subtot};
         dtm.addRow(row);
         double totalAmount = 0;
         for (int i = 0; i < dtm.getRowCount(); i++) {
         totalAmount += (double) dtm.getValueAt(i, 5);
         }
         netAmountFiel.setText(String.valueOf(totalAmount));
         item_combo.requestFocus();
         qtyField.setText("");*/
        //  }
    }//GEN-LAST:event_addbuttonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        insertToDatabase();
        printBill();
    }//GEN-LAST:event_printButtonActionPerformed

    private void qtyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyFieldActionPerformed

    private void customernamecomboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customernamecomboKeyReleased
        int selectedIndex = customernamecombo.getSelectedIndex();
        accountnumbercombo.setSelectedIndex(selectedIndex);
    }//GEN-LAST:event_customernamecomboKeyReleased

    private void customernamecomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customernamecomboMouseClicked
        System.out.println("dfvdfvfv");
    }//GEN-LAST:event_customernamecomboMouseClicked

    private void customernamecomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customernamecomboActionPerformed

        //accountnumbercombo.setSelectedIndex(selectedIndex);
    }//GEN-LAST:event_customernamecomboActionPerformed

    private void customernamecomboPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_customernamecomboPropertyChange

    }//GEN-LAST:event_customernamecomboPropertyChange

    private void customernamecomboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customernamecomboItemStateChanged
        if (accountnumbercombo.getItemCount() != 0) {
            int selectedIndex = customernamecombo.getSelectedIndex();
            accountnumbercombo.setSelectedIndex(selectedIndex);
        }
    }//GEN-LAST:event_customernamecomboItemStateChanged

    private void customernamecomboMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customernamecomboMouseReleased

    }//GEN-LAST:event_customernamecomboMouseReleased

    private void customernamecomboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customernamecomboMouseEntered

    }//GEN-LAST:event_customernamecomboMouseEntered

    private void customernamecomboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customernamecomboMousePressed

    }//GEN-LAST:event_customernamecomboMousePressed

    private void accountnumbercomboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountnumbercomboKeyReleased
        int selectedIndex = accountnumbercombo.getSelectedIndex();
        customernamecombo.setSelectedIndex(selectedIndex);
    }//GEN-LAST:event_accountnumbercomboKeyReleased

    private void accountnumbercomboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_accountnumbercomboItemStateChanged

    }//GEN-LAST:event_accountnumbercomboItemStateChanged

    private void accountnumbercomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountnumbercomboActionPerformed
        if (accountnumbercombo.getItemCount() != 0 & customernamecombo.getItemCount() != 0) {
            int selectedIndex = accountnumbercombo.getSelectedIndex();
            customernamecombo.setSelectedIndex(selectedIndex);
        }
    }//GEN-LAST:event_accountnumbercomboActionPerformed

    private void itemsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemsearchKeyReleased
        try {
            final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(dtm2);
            itemdetail.setRowSorter(sorter);
            sorter.setRowFilter(RowFilter.regexFilter(("(?i)" + itemsearch.getText())));

        } catch (Exception e) {
        }
    }//GEN-LAST:event_itemsearchKeyReleased

    private void percentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_percentageActionPerformed

    private void discountfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountfieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (itemdetail.getSelectedRowCount() > 0) {
                qtyField.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Item First");
            }

        }
    }//GEN-LAST:event_discountfieldKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       ViewEstimate viewEstimate=new ViewEstimate(null, true);
       viewEstimate.setLocationRelativeTo(this);
       viewEstimate.setVisible(true);
       
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox accountnumbercombo;
    private javax.swing.JButton addbutton;
    private javax.swing.JComboBox customernamecombo;
    private javax.swing.JTextField discountfield;
    private javax.swing.JTable estimateTable;
    private com.toedter.calendar.JDateChooser estimateddate;
    private javax.swing.JTable itemdetail;
    private javax.swing.JTextField itemsearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.ButtonGroup mainbuttongroup;
    private javax.swing.JLabel netAmountFiel;
    private javax.swing.JRadioButton percentage;
    private javax.swing.JButton printButton;
    private javax.swing.JTextField qtyField;
    private javax.swing.JButton removeButton;
    private javax.swing.JRadioButton rupee;
    private javax.swing.JLabel subtotalField;
    // End of variables declaration//GEN-END:variables

    private void loadItemForCombo() {
        try {
            EstimateController.getItem(dtm2);
            //item_combo.getEditor().selectAll();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void countTotal() {

        double totalAmount = 0;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            totalAmount += (double) dtm.getValueAt(i, 5);

        }
        netAmountFiel.setText(String.valueOf(totalAmount));

        //  item_combo.requestFocus();
        qtyField.setText("");
    }

    public void printBill() {
        Date date = estimateddate.getDate();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fdate = sdf.format(date);
        System.out.println(fdate);
        String shopName = "Amila Moters";
        String address = "No : 144/1,High Level Road,Colombo. ";
        String tel = "011-2551451, 0771554351";
        String customer = customernamecombo.getSelectedItem().toString();
        String customeraccount = accountnumbercombo.getSelectedItem().toString();
        String times = setDateTime();
        //-------------------------------------------------------------//
        int orderTable = dtm.getRowCount();
        ArrayList<String> items = new ArrayList<>();

        for (int i = 0; i < orderTable; i++) {
            String itempart = String.valueOf(dtm.getValueAt(i, 1));

            if (items.contains(itempart)) {

            } else {
                items.add(String.valueOf(dtm.getValueAt(i, 1)));
            }
        }

        int noQty = 0;
        for (int i = 0; i < orderTable; i++) {
            noQty += Integer.parseInt(String.valueOf(dtm.getValueAt(i, 4)));
        }
        int numberofItem = items.size();
        String snoofitems = String.valueOf(numberofItem);

        String snoqty = String.valueOf(noQty);

        //------------------------------------------------------------//
        HashMap map = new HashMap();

        double netAmount = Double.parseDouble(netAmountFiel.getText());

        map.put("shopName", shopName);
        map.put("address", address);
        map.put("tel", tel);
        map.put("times", times);

        map.put("customer", customer);
        map.put("customeraccount", customeraccount);
        map.put("snoofitems", snoofitems);
        map.put("snoqty", snoqty);
        map.put("fdate", fdate);
        map.put("netAmount", netAmount);

        try {

            JRTableModelDataSource dataSource = new JRTableModelDataSource(dtm);

            //JasperReport estimateReport = JasperCompileManager.compileReport("./src/views/report/newestimate.jrxml");
            JasperPrint print = JasperFillManager.fillReport(estimateReport, map, dataSource);
            JasperViewer.viewReport(print, false);
            dtm.setRowCount(0);
            //-----------------------------------------------------------------------------------//

            //------------------------HTML----------------------------------------
            ///JasperExportManager.exportReportToHtmlFile(print, "d://SalesOrders/" + customer + " " + oid + ".html");
            //------------------------------Printing----------------------------------------------///
            //--------------------------------------------------------------------//
//            PrintService pp = PrintServiceLookup.lookupDefaultPrintService();
//            JRExporter exporter = new JRPrintServiceExporter();
//            exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
//            exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, pp.getAttributes());
//            exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.TRUE);
//            exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.TRUE);
//            exporter.exportReport();
        } catch (JRException ex) {
            ex.printStackTrace();

        }
    }

    private void loadcustomer() {
        try {
            EstimateController.getcustomer(customernamecombo, accountnumbercombo,cusid);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String setDateTime() {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        String year = timeStamp.substring(0, 4);
        String month = timeStamp.substring(4, 6);
        String date = timeStamp.substring(6, 8);
        String hour = timeStamp.substring(9, 11);
        String minute = timeStamp.substring(11, 13);
        String second = timeStamp.substring(13, 15);

        String systemDate = year + "-" + month + "-" + date;

        String systemTime = hour + ":" + minute + ":" + second;
        return systemTime;
    }

    private void insertToDatabase() {
        try {
            Date date = estimateddate.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fdate = sdf.format(date);
            int selectedIndex = customernamecombo.getSelectedIndex();
            String customerid=String.valueOf(cusid.get(String.valueOf(customernamecombo.getSelectedIndex()))) ;
            EstimateController.insertEstimate(customerid, fdate);
            //System.out.println(cusid.get(String.valueOf(customernamecombo.getSelectedIndex())));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EstimatePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
