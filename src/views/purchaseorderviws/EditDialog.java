/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package views.purchaseorderviws;

import controllers.ItemController;
import controllers.PurchesOrderController;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import models.Item;
import models.purchesorderdetail;
import utilities_new.ValidateValues;

/**
 *
 * @author insaf
 */
public class EditDialog extends javax.swing.JDialog {

    int oid;
    DefaultTableModel dtm5;
    DefaultTableModel allitemTabel;
    Map<Object, Object> loadMap;
    Map<Object, Object> removeMap;

    /**
     * Creates new form EditDialog
     */
    public EditDialog(java.awt.Frame parent, boolean modal, int oid) {
        super(parent, modal);
        initComponents();
        this.oid = oid;
        dtm5 = (DefaultTableModel) EditTable.getModel();
        allitemTabel = (DefaultTableModel) selectItem.getModel();
        //  setTable();
        getAllItem();
        EditTable.setBackground(Color.yellow);
        loadMap = new HashMap<>();
        removeMap = new HashMap<>();
        loadToloadMap();
        setDateTime();
        //test();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        EditTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectItem = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        itemkey = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        quntityField = new javax.swing.JTextField();
        addButon = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        EditTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Code", "Qty", "Unit Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EditTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EditTableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                EditTableFocusLost(evt);
            }
        });
        EditTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                EditTableKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(EditTable);

        selectItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Part No.", "Unit Price", "Quantiy"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(selectItem);

        jLabel4.setText("Item:");

        itemkey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemkeyKeyReleased(evt);
            }
        });

        jLabel5.setText("Quantity:");

        quntityField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quntityFieldKeyReleased(evt);
            }
        });

        addButon.setText("Add");
        addButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addGap(3, 3, 3)
                .addComponent(quntityField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButon, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(quntityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addButon))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(4, 4, 4)
                                .addComponent(itemkey, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 979, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(itemkey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Rs.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(275, 275, 275)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        totalLabel.setText("0.00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(submitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EditTableKeyReleased
        double total = 0;
        for (int i = 0; i < dtm5.getRowCount(); i++) {
            int qty = Integer.parseInt(dtm5.getValueAt(i, 2).toString());
            double up = Double.parseDouble(dtm5.getValueAt(i, 3).toString());
            double tot = qty * up;
            dtm5.setValueAt(tot, i, 4);
            total += Double.parseDouble(dtm5.getValueAt(i, 4).toString());
        }
        totalLabel.setText(String.valueOf(total));
    }//GEN-LAST:event_EditTableKeyReleased

    private void EditTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EditTableFocusGained
        double total = 0;
        for (int i = 0; i < dtm5.getRowCount(); i++) {
            int qty = Integer.parseInt(dtm5.getValueAt(i, 2).toString());
            double up = Double.parseDouble(dtm5.getValueAt(i, 3).toString());
            double tot = qty * up;
            dtm5.setValueAt(tot, i, 4);
            total += tot;
        }
        totalLabel.setText(String.valueOf(total));
    }//GEN-LAST:event_EditTableFocusGained

    private void EditTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EditTableFocusLost
        double total = 0;
        for (int i = 0; i < dtm5.getRowCount(); i++) {
            int qty = Integer.parseInt(dtm5.getValueAt(i, 2).toString());
            double up = Double.parseDouble(dtm5.getValueAt(i, 3).toString());
            double tot = qty * up;
            dtm5.setValueAt(tot, i, 4);
            total += tot;
        }
        totalLabel.setText(String.valueOf(total));
    }//GEN-LAST:event_EditTableFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (EditTable.getSelectedRow() >= 0) {
            int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Yes or No?");
            if (showConfirmDialog == 0) {
                int selectedRow = EditTable.getSelectedRow();
                String code = dtm5.getValueAt(selectedRow, 1).toString();
                loadMap.remove(code);
                removeMap.put(code, code);
                dtm5.removeRow(selectedRow);
                double total = 0;
                for (int i = 0; i < dtm5.getRowCount(); i++) {
                    int qty = Integer.parseInt(dtm5.getValueAt(i, 2).toString());
                    double up = Double.parseDouble(dtm5.getValueAt(i, 3).toString());
                    double tot = qty * up;
                    dtm5.setValueAt(tot, i, 4);
                    total += tot;
                }
                totalLabel.setText(String.valueOf(total));
            } else {
            }

        } else {
            JOptionPane.showMessageDialog(null, "No selected Row", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void selectItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectItemMouseClicked
        int selectedRow = selectItem.getSelectedRow();
        itemkey.setText(allitemTabel.getValueAt(selectedRow, 1).toString());
    }//GEN-LAST:event_selectItemMouseClicked

    private void itemkeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemkeyKeyReleased
        try {
            final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(allitemTabel);
            selectItem.setRowSorter(sorter);
            sorter.setRowFilter(RowFilter.regexFilter(itemkey.getText()));

        } catch (Exception e) {
        }
    }//GEN-LAST:event_itemkeyKeyReleased

    private void addButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButonActionPerformed
        if (selectItem.getSelectedRow() >= 0) {
            if (!quntityField.getText().isEmpty()) {

                //----------------------------------------------------
                int selectedRow = selectItem.getSelectedRow();
                String id = allitemTabel.getValueAt(selectedRow, 0).toString();
                String name = allitemTabel.getValueAt(selectedRow, 1).toString();
                Double unitPrice = Double.parseDouble(allitemTabel.getValueAt(selectedRow, 2).toString());
                int quntity = Integer.parseInt(quntityField.getText());
                Double amount = unitPrice * quntity;
                //Object row[] = {id, name, unitPrice, quntity, amount};

//        dtm2.addRow(row);
//        double tot = 0;
//        for (int j = 0; j < dtm2.getRowCount(); j++) {
//            tot = +Double.parseDouble(dtm2.getValueAt(j, 4).toString());
//        }
//        totalLabel.setText(String.valueOf(tot));
                //----------------------------------------------------------------------------------//-------------------------//
                if (dtm5.getRowCount() == 0) {
                    Object row2[] = {name, id, quntity, unitPrice, amount};
                    dtm5.addRow(row2);

                } else {

                    boolean exists = false;
                    int index = 0;

                    for (int i = 0; i < dtm5.getRowCount(); i++) {

                        String code = String.valueOf(dtm5.getValueAt(i, 1));

                        if (id.equals(code)) {

                            exists = true;
                            index = i;
                            break;

                        }

                    }

                    if (exists) {

                        int value = Integer.parseInt(dtm5.getValueAt(index, 2).toString());
                        int newQty = value + quntity;
                        dtm5.setValueAt(newQty, index, 2);
                        double newprice = (unitPrice * newQty);

                        dtm5.setValueAt(newprice, index, 4);

                    } else {
                        Object row2[] = {name, id, quntity, unitPrice, amount};
                        dtm5.addRow(row2);

                    }

                }
                double tot2 = 0;
                for (int j = 0; j < dtm5.getRowCount(); j++) {
                    tot2 += Double.parseDouble(dtm5.getValueAt(j, 4).toString());
                }
                totalLabel.setText(String.valueOf(tot2));
                quntityField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "No Quntity", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No selected Row", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addButonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        try {
            ArrayList<purchesorderdetail> purchesOrders = new ArrayList<>();
            //---------------------Remove-----------------------------------
            Collection<Object> values = removeMap.values();

            Object[] toArray = values.toArray();
            int size = toArray.length;
            for (int i = 0; i < size; i++) {
                String icode = (String) toArray[i];
                System.out.println(icode);
                PurchesOrderController.removeItem(oid, icode);
            }
            //----------------Update /Insert------------------------------------

            for (int i = 0; i < dtm5.getRowCount(); i++) {
                String icode = dtm5.getValueAt(i, 1).toString();
                int qty = Integer.parseInt(dtm5.getValueAt(i, 2).toString());
                double amount = Double.parseDouble(dtm5.getValueAt(i, 4).toString());
                if (loadMap.containsKey(dtm5.getValueAt(i, 1).toString())) {

                    //-----------------Updte----------------------
                    PurchesOrderController.updatePurchesOrderDetail(oid, icode, qty);
                } else {
                    //--------------Insert---------------------------
                    purchesorderdetail pod = new purchesorderdetail();
                    pod.setOrderid(oid);
                    pod.setItem(Integer.parseInt(icode));
                    pod.setQty(qty);
                    pod.setStatus(1);
                    purchesOrders.add(pod);
                    System.out.println("insert");

                }

            }
            PurchesOrderController.addPerchuseOrderDetail(purchesOrders);
            PurchesOrderController.updatePurchesOrder(oid, dateLabel.getText(), Double.parseDouble(totalLabel.getText()));
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditDialog.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            JOptionPane.showMessageDialog(null, "Succsess");
        }

    }//GEN-LAST:event_submitButtonActionPerformed

    private void quntityFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quntityFieldKeyReleased
        ValidateValues.validateTextFieldForNumber(quntityField);
    }//GEN-LAST:event_quntityFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                EditDialog dialog = new EditDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable EditTable;
    private javax.swing.JButton addButon;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField itemkey;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField quntityField;
    private javax.swing.JTable selectItem;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables

//    private void setTable() {
//        try {
//            PurchesOrderController.getall(oid, dtm5, totalLabel);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(EditDialog.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(EditDialog.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    private void getAllItem() {
        allitemTabel.setRowCount(0);
        try {
            ArrayList<Item> allItem = ItemController.getAllItem();
            for (Item i : allItem) {
                Object row[] = {i.getItemID(), i.getItemName(), i.getBuyingPrice(), i.getRemainingQty()};
                allitemTabel.addRow(row);

            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadToloadMap() {
        for (int i = 0; i < dtm5.getRowCount(); i++) {
            String itemCode = dtm5.getValueAt(i, 1).toString();
            loadMap.put(itemCode, itemCode);

        }
    }

    private void test() {
        int size = loadMap.size();

        for (int i = 0; i < dtm5.getRowCount(); i++) {
            String itemCode = dtm5.getValueAt(i, 1).toString();

            System.out.println(loadMap.get(itemCode) + "go");

        }
    }

    private void setDateTime() {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        String year = timeStamp.substring(0, 4);
        String month = timeStamp.substring(4, 6);
        String date = timeStamp.substring(6, 8);
        String hour = timeStamp.substring(9, 11);
        String minute = timeStamp.substring(11, 13);
        String second = timeStamp.substring(13, 15);

        String systemDate = year + "-" + month + "-" + date;
        dateLabel.setText(systemDate);
        String systemTime = hour + ":" + minute + ":" + second;
    }
}
