/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package views.purchaseorderviws;

import com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException;
import controllers.DeliverOrderController;
import controllers.ItemController;
import controllers.ProfileController;
import controllers.PurchesOrderController;
import controllers.StockController;
import java.awt.HeadlessException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import models.DeliverOrder;
import models.DeliverOrderDetail;
import models.Item;
import models.PurchesOrder;
import models.purchesorderdetail;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import utilities_new.CheckConnection;
import utilities_new.JSonJava;
import views.userviws.LogingUser_new;

/**
 *
 * @author insaf
 */
public class PerchusOrder extends javax.swing.JPanel {

    private static DefaultTableModel dtm, dtm2, dtm3, dtm4, dtm6, dtm7, unAssignedDtm, unAssignedDetailsDtm, autoCreatedDtm;
    TableModel model;
    JScrollPane jScrollPane;
    private static Map<Object, Object> tmap;
    private static Map<Object, Object> allPuMap;
    private static Map<Object, Object> acceptMap;
    private ResultSet dealerRst;

    /**
     * Creates new form PerchusOrder
     */
    public PerchusOrder() {

        initComponents();
        tmap = new HashMap<>();
        allPuMap = new HashMap<>();
        acceptMap = new HashMap<>();
        dtm2 = (DefaultTableModel) orderTable.getModel();
        dtm3 = (DefaultTableModel) allPurchesOrder.getModel();
        dtm4 = (DefaultTableModel) datailTable.getModel();
        dtm6 = (DefaultTableModel) purcheseOrderTable.getModel();
        dtm7 = (DefaultTableModel) deliverDetailtable.getModel();
        autoCreatedDtm = (DefaultTableModel) tblGeneratedOrder.getModel();
        unAssignedDtm = (DefaultTableModel) tblUnAssigned.getModel();
        unAssignedDetailsDtm = (DefaultTableModel) tblUnAssinedDetails.getModel();

        model = purcheseOrderTable.getModel();

        try {
            getAllPuechesOrder();
            DeliverOrderController.loadAllDeliverOrders(dtm6);
            PurchesOrderController.loadAllUnAssignedPurchaseOrders(unAssignedDtm);
            PurchesOrderController.autoCreatePurchaseOrder(autoCreatedDtm);
            dealerRst = ProfileController.getDealerDetails();
            dealerRst.next();
            lblDiscount.setText(dealerRst.getDouble(4) + "");
            lblVat.setText(dealerRst.getDouble(5) + "");
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            orderTable.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
            orderTable.getColumnModel().getColumn(5).setCellRenderer(rightRenderer);
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            orderTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);

        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        acceptButton.setEnabled(true);
        Date d1 = new Date();
        deliveredDateChooser.setDate(d1);
        notDeliveredDateChooser.setDate(d1);

        checkPurchaseOrderButton();
        checkAddButtons();
        checkRetryButton();
        calculateTotal();
        checkAcceptButton();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void checkPurchaseOrderButton() {
        int rowCount = orderTable.getRowCount();
        if (rowCount > 0) {
            place.setEnabled(true);
        } else {
            place.setEnabled(false);
        }

    }

    public void checkRetryButton() {
        int rowCount = tblUnAssigned.getRowCount();
        if (rowCount > 0) {

            btnRetrySending.setEnabled(true);
        } else {

            btnRetrySending.setEnabled(false);
        }
    }

    public void checkAcceptButton() {
        int rowCount = purcheseOrderTable.getSelectedRowCount();
        if (rowCount == 1) {

            acceptButton.setEnabled(true);
        } else {

            acceptButton.setEnabled(false);
        }
    }

    public void checkAddButtons() {
        int rowCount = tblGeneratedOrder.getRowCount();
        int selectedRow = tblGeneratedOrder.getSelectedRowCount();
        if (rowCount > 0) {

            btnAddAllParts.setEnabled(true);
        } else {

            btnAddAllParts.setEnabled(false);
        }
        if (selectedRow > 0) {
            btnAddPart.setEnabled(true);
        } else {
            btnAddPart.setEnabled(false);
        }
    }

    public void checkRefreshAcceptOrderButtons() {

        int selectedRow = purcheseOrderTable.getSelectedRow();
        String completedStatus = purcheseOrderTable.getValueAt(selectedRow, 5).toString();
        String acceptedStatus = purcheseOrderTable.getValueAt(selectedRow, 6).toString();
        if (completedStatus.equals("<html><font color='green'>Completed</font></html>") || completedStatus.equals("<html><font color='green'>Accepted</font></html>")) {
            acceptButton.setEnabled(true);
        } else {
            acceptButton.setEnabled(false);
        }
    }

    public static DefaultTableModel getUnAssignedDtm() {
        return unAssignedDtm;
    }

    public void printPurchaseOrder() {
        HashMap map = new HashMap();
        String createdname = "Saman Service Centre";
        double netAmount = Double.parseDouble(lblTotalWithDiscount.getText());
        String dealerAccountNo = LogingUser_new.account_number;
        map.put("createdname", createdname);

        map.put("dealerAccountNo", dealerAccountNo);

        try {
            JRTableModelDataSource dataSource = new JRTableModelDataSource(dtm2);

            JasperReport estimateReport = JasperCompileManager.compileReport("./report/purchaseorder.jrxml");
            JasperPrint print = JasperFillManager.fillReport(estimateReport, map, dataSource);
            JasperViewer.viewReport(print, false);

        } catch (JRException ex) {
            ex.printStackTrace();

        }

    }

    public double calculateTotal() {
        int rowCount = orderTable.getRowCount();
        double total = 0.00;
        for (int i = 0; i < rowCount; i++) {
            total += Double.parseDouble(orderTable.getValueAt(i, 5).toString().trim());
        }

        double discount = Double.parseDouble(lblDiscount.getText());
        double totalWithDiscount = total - ((total * discount) / 100);
        lblTotalWithDiscount.setText("" + String.format("%.2f", totalWithDiscount));

        //double vat = Double.parseDouble(lblVat.getText());
        //double totalWithVat = totalWithDiscount + ((totalWithDiscount * vat) / 100);
        lblTotalWithVat.setText("" + String.format("%.2f", total));
        return total;
    }

    public void addSuggestedPartToOrder(int selectedRow) {
        DecimalFormat df = new DecimalFormat("#.00");
        df.setMinimumFractionDigits(2);
        String partNo = tblGeneratedOrder.getValueAt(selectedRow, 1).toString();
        String description = tblGeneratedOrder.getValueAt(selectedRow, 2).toString();
        int itemCode = Integer.parseInt(tblGeneratedOrder.getValueAt(selectedRow, 0).toString());
        double buyingPrice = Double.parseDouble(tblGeneratedOrder.getValueAt(selectedRow, 3).toString());
        double formattedBuyingPrice = Double.parseDouble(df.format(buyingPrice));
        double quantity = Double.parseDouble(tblGeneratedOrder.getValueAt(selectedRow, 11).toString());

        double amount = Double.parseDouble(df.format(buyingPrice * quantity));

        if (partNo == null || partNo == "") {
            JOptionPane.showMessageDialog(this, "Please select an item to add", "Error in items", JOptionPane.WARNING_MESSAGE);
        } else if (quantity == 0) {
            JOptionPane.showMessageDialog(this, "Quantity cannot be empty or 0", "Error in quantity", JOptionPane.WARNING_MESSAGE);
        } else {
            Object obj[] = {itemCode, partNo, description, formattedBuyingPrice, quantity, amount};
            dtm2.addRow(obj);
            autoCreatedDtm.removeRow(selectedRow);

        }
    }

    public void addAllPartsToOrder() {
        int rowCount = tblGeneratedOrder.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String partNo = tblGeneratedOrder.getValueAt(i, 1).toString();
            String description = tblGeneratedOrder.getValueAt(i, 2).toString();
            int itemCode = Integer.parseInt(tblGeneratedOrder.getValueAt(i, 0).toString());
            double buyingPrice = Double.parseDouble(tblGeneratedOrder.getValueAt(i, 3).toString());
            double quantity = Double.parseDouble(tblGeneratedOrder.getValueAt(i, 11).toString());

            double amount = buyingPrice * quantity;
            Object obj[] = {itemCode, partNo, description, buyingPrice, quantity, amount};
            dtm2.addRow(obj);
        }
        autoCreatedDtm.setRowCount(0);
    }

    public void clearFields() {
        nameLabel.setText("");
        lblTotalWithDiscount.setText("0.00");
        lblTotalWithVat.setText("0.00");
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        orderTablePopup = new javax.swing.JPopupMenu();
        remove = new javax.swing.JMenuItem();
        removeAllItem = new javax.swing.JMenuItem();
        tblUnAssignedPopup = new javax.swing.JPopupMenu();
        retry = new javax.swing.JMenuItem();
        update = new javax.swing.JMenuItem();
        purcheseOrderTablePopup = new javax.swing.JPopupMenu();
        refresh = new javax.swing.JMenuItem();
        refreshAll = new javax.swing.JMenuItem();
        accept = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnAddAllParts = new javax.swing.JButton();
        btnAddPart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblGeneratedOrder = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        removeAll = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        lblDiscount = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblVat = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        place = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblTotalWithDiscount = new javax.swing.JLabel();
        lblTotalWithVat = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnReprint = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        allPurchesOrder = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        datailTable = new javax.swing.JTable();
        deliveredDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        btnRetrySending = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblUnAssigned = new javax.swing.JTable();
        notDeliveredDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblUnAssinedDetails = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        purcheseOrderTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        deliverDetailtable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        acceptButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        suggestPanel1 = new views.suggest.SuggestPanel();

        jTextField3.setText("jTextField3");

        orderTablePopup.setLabel("Select");

        remove.setText("Remove");
        remove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeMousePressed(evt);
            }
        });
        orderTablePopup.add(remove);

        removeAllItem.setText("Remove All");
        removeAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllItemActionPerformed(evt);
            }
        });
        orderTablePopup.add(removeAllItem);

        retry.setText("Retry Sending");
        retry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryActionPerformed(evt);
            }
        });
        tblUnAssignedPopup.add(retry);

        update.setText("update & send");
        tblUnAssignedPopup.add(update);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        purcheseOrderTablePopup.add(refresh);

        refreshAll.setText("Refresh All");
        refreshAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshAllActionPerformed(evt);
            }
        });
        purcheseOrderTablePopup.add(refreshAll);

        accept.setText("Accept");
        accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });
        purcheseOrderTablePopup.add(accept);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
        });

        btnAddAllParts.setText("Add All");
        btnAddAllParts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllPartsActionPerformed(evt);
            }
        });

        btnAddPart.setText("Add");
        btnAddPart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 77, Short.MAX_VALUE)
                .addComponent(btnAddPart, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddAllParts))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddAllParts, btnAddPart});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnAddAllParts)
                .addComponent(btnAddPart))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAddAllParts, btnAddPart});

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Part No", "Description", "Cost Price", "Quantiy", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setMinWidth(0);
            orderTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            orderTable.getColumnModel().getColumn(0).setMaxWidth(0);
            orderTable.getColumnModel().getColumn(2).setMinWidth(200);
            orderTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            orderTable.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("New Parts.");

        tblGeneratedOrder.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tblGeneratedOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Part No.", "Description", "buyling price", "Remaining Stock Qty.", "Avg. Monthly Sale", "Total Sales for Last 30 Days", "Stock Loss Sale for Last 30 Days", "Avg. Daily Demand", "Days Between Orders", "Suggested Qty.", "Purchase Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGeneratedOrder.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblGeneratedOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblGeneratedOrder.setShowVerticalLines(false);
        tblGeneratedOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGeneratedOrderMouseClicked(evt);
            }
        });
        tblGeneratedOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblGeneratedOrderKeyPressed(evt);
            }
        });
        jScrollPane7.setViewportView(tblGeneratedOrder);
        if (tblGeneratedOrder.getColumnModel().getColumnCount() > 0) {
            tblGeneratedOrder.getColumnModel().getColumn(0).setMinWidth(0);
            tblGeneratedOrder.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblGeneratedOrder.getColumnModel().getColumn(0).setMaxWidth(0);
            tblGeneratedOrder.getColumnModel().getColumn(1).setMinWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(1).setMaxWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(2).setMinWidth(200);
            tblGeneratedOrder.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblGeneratedOrder.getColumnModel().getColumn(2).setMaxWidth(200);
            tblGeneratedOrder.getColumnModel().getColumn(3).setMinWidth(0);
            tblGeneratedOrder.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblGeneratedOrder.getColumnModel().getColumn(3).setMaxWidth(0);
            tblGeneratedOrder.getColumnModel().getColumn(4).setMinWidth(150);
            tblGeneratedOrder.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblGeneratedOrder.getColumnModel().getColumn(4).setMaxWidth(150);
            tblGeneratedOrder.getColumnModel().getColumn(5).setMinWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(5).setPreferredWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(5).setMaxWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(6).setMinWidth(150);
            tblGeneratedOrder.getColumnModel().getColumn(6).setPreferredWidth(150);
            tblGeneratedOrder.getColumnModel().getColumn(6).setMaxWidth(150);
            tblGeneratedOrder.getColumnModel().getColumn(7).setMinWidth(160);
            tblGeneratedOrder.getColumnModel().getColumn(7).setPreferredWidth(160);
            tblGeneratedOrder.getColumnModel().getColumn(7).setMaxWidth(160);
            tblGeneratedOrder.getColumnModel().getColumn(8).setMinWidth(130);
            tblGeneratedOrder.getColumnModel().getColumn(8).setPreferredWidth(130);
            tblGeneratedOrder.getColumnModel().getColumn(8).setMaxWidth(130);
            tblGeneratedOrder.getColumnModel().getColumn(9).setMinWidth(130);
            tblGeneratedOrder.getColumnModel().getColumn(9).setPreferredWidth(130);
            tblGeneratedOrder.getColumnModel().getColumn(9).setMaxWidth(130);
            tblGeneratedOrder.getColumnModel().getColumn(10).setMinWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(10).setPreferredWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(10).setMaxWidth(120);
            tblGeneratedOrder.getColumnModel().getColumn(11).setMinWidth(100);
            tblGeneratedOrder.getColumnModel().getColumn(11).setPreferredWidth(100);
            tblGeneratedOrder.getColumnModel().getColumn(11).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel13.setText("Name:");

        nameLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameLabelActionPerformed(evt);
            }
        });
        nameLabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameLabelKeyReleased(evt);
            }
        });

        jButton5.setText("+");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        removeButton.setText("-");
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                removeButtonMouseEntered(evt);
            }
        });
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        removeAll.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        removeAll.setText("-");
        removeAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                removeAllMouseEntered(evt);
            }
        });
        removeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllActionPerformed(evt);
            }
        });

        jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel9.setText("Current Dealer Discount %:");
        jLabel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        lblDiscount.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblDiscount.setText("17");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel11.setText("Current Vat Percentage %:");
        jLabel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        lblVat.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblVat.setText("12");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel14.setText("Total Amount with Discount:");
        jLabel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel16.setText("Total Amount with Vat:");
        jLabel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        place.setText("Send");
        place.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        place.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Rs.");

        lblTotalWithDiscount.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTotalWithDiscount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalWithDiscount.setText("0.00");
        lblTotalWithDiscount.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        lblTotalWithVat.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTotalWithVat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalWithVat.setText("0.00");
        lblTotalWithVat.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel19.setText("Rs.");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblVat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 377, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalWithDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(lblTotalWithVat, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblTotalWithDiscount, lblTotalWithVat});

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel11, jLabel9});

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(lblDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVat, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel19)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(lblTotalWithDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalWithVat)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel11, jLabel14, jLabel16, jLabel9, lblTotalWithDiscount, lblTotalWithVat});

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Suggested Parts.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameLabel)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAll)
                        .addGap(0, 129, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton5, removeAll, removeButton});

        jTabbedPane1.addTab("New Purchase Order", jPanel2);

        allPurchesOrder.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        allPurchesOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Purchase Order No.", "Date", "Time", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allPurchesOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allPurchesOrderMouseClicked(evt);
            }
        });
        allPurchesOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                allPurchesOrderKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(allPurchesOrder);
        if (allPurchesOrder.getColumnModel().getColumnCount() > 0) {
            allPurchesOrder.getColumnModel().getColumn(0).setMinWidth(0);
            allPurchesOrder.getColumnModel().getColumn(0).setPreferredWidth(0);
            allPurchesOrder.getColumnModel().getColumn(0).setMaxWidth(0);
            allPurchesOrder.getColumnModel().getColumn(2).setResizable(false);
            allPurchesOrder.getColumnModel().getColumn(3).setResizable(false);
            allPurchesOrder.getColumnModel().getColumn(4).setResizable(false);
        }

        datailTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        datailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Part ID", "Part No.", "Description", "Qty.", "Buying Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(datailTable);
        if (datailTable.getColumnModel().getColumnCount() > 0) {
            datailTable.getColumnModel().getColumn(0).setMinWidth(0);
            datailTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            datailTable.getColumnModel().getColumn(0).setMaxWidth(0);
            datailTable.getColumnModel().getColumn(1).setPreferredWidth(120);
            datailTable.getColumnModel().getColumn(2).setPreferredWidth(170);
            datailTable.getColumnModel().getColumn(3).setMinWidth(35);
            datailTable.getColumnModel().getColumn(3).setPreferredWidth(35);
            datailTable.getColumnModel().getColumn(3).setMaxWidth(35);
            datailTable.getColumnModel().getColumn(4).setPreferredWidth(85);
            datailTable.getColumnModel().getColumn(5).setPreferredWidth(85);
        }

        javax.swing.GroupLayout btnReprintLayout = new javax.swing.GroupLayout(btnReprint);
        btnReprint.setLayout(btnReprintLayout);
        btnReprintLayout.setHorizontalGroup(
            btnReprintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnReprintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                .addContainerGap())
        );
        btnReprintLayout.setVerticalGroup(
            btnReprintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnReprintLayout.createSequentialGroup()
                .addGroup(btnReprintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(43, 43, 43))
        );

        deliveredDateChooser.setToolTipText("");
        deliveredDateChooser.setDateFormatString("yyyy-MM-dd");
        deliveredDateChooser.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        deliveredDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                deliveredDateChooserPropertyChange(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Purchase Order Date:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnReprint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deliveredDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deliveredDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReprint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Delivered", jPanel3);

        btnRetrySending.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRetrySending.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        btnRetrySending.setMaximumSize(new java.awt.Dimension(177, 50));
        btnRetrySending.setMinimumSize(new java.awt.Dimension(177, 33));
        btnRetrySending.setPreferredSize(new java.awt.Dimension(177, 33));
        btnRetrySending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrySendingActionPerformed(evt);
            }
        });

        tblUnAssigned.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        tblUnAssigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Purchase Order No.", "User", "Date", "Time", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUnAssigned.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUnAssignedMouseClicked(evt);
            }
        });
        tblUnAssigned.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblUnAssignedKeyReleased(evt);
            }
        });
        jScrollPane8.setViewportView(tblUnAssigned);
        if (tblUnAssigned.getColumnModel().getColumnCount() > 0) {
            tblUnAssigned.getColumnModel().getColumn(0).setMinWidth(0);
            tblUnAssigned.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblUnAssigned.getColumnModel().getColumn(0).setMaxWidth(0);
            tblUnAssigned.getColumnModel().getColumn(1).setMinWidth(150);
            tblUnAssigned.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblUnAssigned.getColumnModel().getColumn(1).setMaxWidth(150);
            tblUnAssigned.getColumnModel().getColumn(2).setMinWidth(0);
            tblUnAssigned.getColumnModel().getColumn(2).setPreferredWidth(0);
            tblUnAssigned.getColumnModel().getColumn(2).setMaxWidth(0);
            tblUnAssigned.getColumnModel().getColumn(3).setResizable(false);
            tblUnAssigned.getColumnModel().getColumn(4).setResizable(false);
            tblUnAssigned.getColumnModel().getColumn(5).setResizable(false);
        }

        notDeliveredDateChooser.setDateFormatString("yyyy-MM-dd");
        notDeliveredDateChooser.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        notDeliveredDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                notDeliveredDateChooserPropertyChange(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel10.setText("Purchase Order Date:");

        tblUnAssinedDetails.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        tblUnAssinedDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Part ID", "Part No.", "Description", "Qty.", "Unit Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(tblUnAssinedDetails);
        if (tblUnAssinedDetails.getColumnModel().getColumnCount() > 0) {
            tblUnAssinedDetails.getColumnModel().getColumn(0).setMinWidth(0);
            tblUnAssinedDetails.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblUnAssinedDetails.getColumnModel().getColumn(0).setMaxWidth(0);
            tblUnAssinedDetails.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblUnAssinedDetails.getColumnModel().getColumn(2).setPreferredWidth(180);
            tblUnAssinedDetails.getColumnModel().getColumn(3).setMinWidth(35);
            tblUnAssinedDetails.getColumnModel().getColumn(3).setPreferredWidth(35);
            tblUnAssinedDetails.getColumnModel().getColumn(3).setMaxWidth(35);
            tblUnAssinedDetails.getColumnModel().getColumn(4).setPreferredWidth(120);
            tblUnAssinedDetails.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(notDeliveredDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRetrySending, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(notDeliveredDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(10, 10, 10)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(btnRetrySending, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, notDeliveredDateChooser});

        jTabbedPane1.addTab("Not Delivered", jPanel13);

        purcheseOrderTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        purcheseOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "deliver Order ID", "Invoice No", "WIP No", "Invoiced Date", "Invoiced Time", "Amount (Rs.)", "Due Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        purcheseOrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purcheseOrderTableMouseClicked(evt);
            }
        });
        purcheseOrderTable.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                purcheseOrderTableAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        purcheseOrderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                purcheseOrderTableKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(purcheseOrderTable);
        if (purcheseOrderTable.getColumnModel().getColumnCount() > 0) {
            purcheseOrderTable.getColumnModel().getColumn(0).setMinWidth(0);
            purcheseOrderTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            purcheseOrderTable.getColumnModel().getColumn(0).setMaxWidth(0);
            purcheseOrderTable.getColumnModel().getColumn(1).setResizable(false);
            purcheseOrderTable.getColumnModel().getColumn(2).setResizable(false);
            purcheseOrderTable.getColumnModel().getColumn(3).setResizable(false);
            purcheseOrderTable.getColumnModel().getColumn(4).setResizable(false);
            purcheseOrderTable.getColumnModel().getColumn(5).setResizable(false);
            purcheseOrderTable.getColumnModel().getColumn(7).setMinWidth(0);
            purcheseOrderTable.getColumnModel().getColumn(7).setPreferredWidth(0);
            purcheseOrderTable.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        deliverDetailtable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        deliverDetailtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Code", "Qty", "Unit Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deliverDetailtable.setMaximumSize(new java.awt.Dimension(0, 0));
        deliverDetailtable.setMinimumSize(new java.awt.Dimension(0, 0));
        deliverDetailtable.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane6.setViewportView(deliverDetailtable);
        if (deliverDetailtable.getColumnModel().getColumnCount() > 0) {
            deliverDetailtable.getColumnModel().getColumn(0).setResizable(false);
            deliverDetailtable.getColumnModel().getColumn(1).setResizable(false);
            deliverDetailtable.getColumnModel().getColumn(2).setResizable(false);
            deliverDetailtable.getColumnModel().getColumn(3).setMinWidth(0);
            deliverDetailtable.getColumnModel().getColumn(3).setPreferredWidth(0);
            deliverDetailtable.getColumnModel().getColumn(3).setMaxWidth(0);
            deliverDetailtable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel15.setText("Invoice/WIP No:");

        txtInvoiceNo.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtInvoiceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInvoiceNoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1059, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(31, 31, 31)
                        .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane5)))
        );

        acceptButton.setText("Accept");
        acceptButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        acceptButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Request Order");
        jButton4.setMaximumSize(new java.awt.Dimension(0, 0));
        jButton4.setMinimumSize(new java.awt.Dimension(0, 0));
        jButton4.setPreferredSize(new java.awt.Dimension(0, 0));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {acceptButton, btnRefresh});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {acceptButton, btnRefresh});

        jTabbedPane1.addTab("GRN", jPanel5);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(suggestPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1085, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(suggestPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 50, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Suggested", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void allPurchesOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allPurchesOrderKeyReleased

        int selectedRow = allPurchesOrder.getSelectedRow();
        String id = allPurchesOrder.getValueAt(selectedRow, 0).toString();

        int oid = Integer.parseInt(allPurchesOrder.getValueAt(selectedRow, 0).toString());
        try {
            PurchesOrderController.getallDeliveredPurchaseOrderDetail(oid, dtm4);
        } catch (ClassNotFoundException | SQLException ex) {
        } catch (Exception ex) {

        }

            //-----------------------------------

    }//GEN-LAST:event_allPurchesOrderKeyReleased

    private void allPurchesOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allPurchesOrderMouseClicked
        if (evt.getClickCount() == 1) {
            int selectedRow = allPurchesOrder.getSelectedRow();
            String id = allPurchesOrder.getValueAt(selectedRow, 0).toString();

            int oid = Integer.parseInt(allPurchesOrder.getValueAt(selectedRow, 0).toString());
            try {
                PurchesOrderController.getallDeliveredPurchaseOrderDetail(oid, dtm4);
            } catch (ClassNotFoundException | SQLException ex) {
            } catch (Exception ex) {
            }

            //-----------------------------------
        }
    }//GEN-LAST:event_allPurchesOrderMouseClicked
    public JSONObject addNewPurchaseOrder(int status) throws ClassNotFoundException, SQLException, NullPointerException, JSONException, Exception {
        int maxPurchaseOrderID = 0;
        JSONObject poData = new JSONObject();
        JSONObject mainJSON = new JSONObject();
        JSONObject partsData = null;
        JSONArray partsArray = new JSONArray();
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        String time = sdf.format(date);
        sdf.applyPattern("yyyy-MM-dd");
        String toDate = sdf.format(date);
        PurchesOrder purchesOrder = new PurchesOrder();
        purchesOrder.setDate(toDate);
        purchesOrder.setTime(time);
        purchesOrder.setUser(nameLabel.getText());
        purchesOrder.setStatus(status);
        purchesOrder.setTotal(Double.parseDouble(lblTotalWithVat.getText()));
        purchesOrder.setCurrentDealerDiscount(Double.parseDouble(lblDiscount.getText()));
        purchesOrder.setCurrentVatAmount(Double.parseDouble(lblVat.getText()));
        purchesOrder.setFinalAmount(Double.parseDouble(lblTotalWithDiscount.getText()));
        double totalDiscount = Double.parseDouble(lblTotalWithVat.getText()) - Double.parseDouble(lblTotalWithDiscount.getText());
        String totalDiscStr = String.format("%.2f", totalDiscount);
        int addPurchesOrder = PurchesOrderController.addPurchesOrder(purchesOrder);
        if (addPurchesOrder > 0) {
            maxPurchaseOrderID = PurchesOrderController.getMaxPurchaseOrderID();
            ArrayList<purchesorderdetail> purchesOrders = new ArrayList<>();
            poData.put("dealerPurchaseOrderID", maxPurchaseOrderID);
            poData.put("date", toDate);
            poData.put("time", time);
            poData.put("dealerAccountNo", dealerRst.getString(3));
            poData.put("final_amount", lblTotalWithDiscount.getText());
            poData.put("total_amount", lblTotalWithVat.getText());
            poData.put("status", 1);
            poData.put("tour_status", 0);
            poData.put("is_sales_officer", 0);
            poData.put("discount_percentage", dealerRst.getDouble(4));
            poData.put("current_vat", dealerRst.getDouble(5));
            poData.put("tot_disc", totalDiscStr);

            for (int k = 0; k < orderTable.getRowCount(); k++) {
                partsData = new JSONObject();
                purchesorderdetail pod = new purchesorderdetail();
                String partNo = orderTable.getValueAt(k, 1).toString();
                int itemID = Integer.parseInt(orderTable.getValueAt(k, 0).toString());
                double unitPrice = Double.parseDouble(orderTable.getValueAt(k, 3).toString());
                double qty = Double.parseDouble(orderTable.getValueAt(k, 4).toString());
                String description = orderTable.getValueAt(k, 2).toString();
                pod.setItem(itemID);
                pod.setUnitprice(unitPrice);
                pod.setStatus(1);
                pod.setQty(qty);
                pod.setOrderid(maxPurchaseOrderID);
                partsData.put("partNo", partNo);
                partsData.put("description", description);
                partsData.put("unit_price", unitPrice);
                partsData.put("qty", qty);
                partsData.put("status", status);
                partsArray.put(partsData);
                purchesOrders.add(pod);
            }
            mainJSON.put("po_data", poData);
            mainJSON.put("parts_data", partsArray);
           // System.out.println(mainJSON);
            int addPerchuseOrderDetail = PurchesOrderController.addPerchuseOrderDetail(purchesOrders);
            if (addPerchuseOrderDetail > 0) {
                //printPurchaseOrder();
                dtm3.setRowCount(0);
                //getCompletedPurchaseOrder();
                getAllPuechesOrder();
                JOptionPane.showMessageDialog(this, "Purchase order added successfully", "Succeeded", JOptionPane.INFORMATION_MESSAGE);
                dtm2.setRowCount(0);
            }
        }
        return mainJSON;
    }

    public static synchronized int sendPurchaseOrderAsaJson(JSONObject mainJSON) throws ClassNotFoundException, SQLException {
        ResultSet dealerRST = ProfileController.getDealerDetails();
        dealerRST.next();
        String serverURL = dealerRST.getString(9);
        int returnValue = 0;
        try {
            String replaceAll = mainJSON.toString().replaceAll("\\s", "%20");
            String replace = replaceAll.replaceAll("\\n", "%30");
            String url = serverURL + "dimo_lanka/pos_services/insertNewDirectPurchaseOder";
        //  System.out.println(url + "?po_data=" + replace);
            JSONObject returnedObject = new JSonJava().postJSONObject(mainJSON, url, "po_data");
            String purchaseOrderNumber = returnedObject.getString("po_number");
            int admin_po_id = returnedObject.getInt("admin_po_id");
            PurchesOrder po = new PurchesOrder(mainJSON.getJSONObject("po_data").getInt("dealerPurchaseOrderID"), admin_po_id, purchaseOrderNumber, 1);
            returnValue = PurchesOrderController.saveAdminPurchaseOrderID(po);
        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (MalformedURLException mex) {
            mex.printStackTrace();
        } catch (IOException ioex) {
        } catch (JSONException ex) {
            ex.printStackTrace();
        } finally {
            return returnValue;
        }

    }

    public static int getPurchaseOrderStatus() {
        int status = 0;
        JSONObject orderIDObject = new JSONObject();
        DecimalFormat df = new DecimalFormat("#.00");
        df.setMinimumFractionDigits(2);

        try {
            ResultSet rst = ProfileController.getDealerDetails();
            String timestamp = DeliverOrderController.getLastTimeStamp();
          //  System.out.println("time" + timestamp);
            rst.next();
            String accountNo = rst.getString(3);
            String serverURL = rst.getString(9);
            orderIDObject.put("acc_no", accountNo);
            orderIDObject.put("time_stamp", timestamp);
            JSONArray ja = new JSONArray();

            ja.put(orderIDObject);
            String replaceAll = ja.toString().replaceAll("\\s", "%20");
            String replace = replaceAll.replaceAll("\\n", "%30");
            //web aken anne staus 2 una awa
            System.out.println(serverURL + "dimo_lanka/dealer_purchase_order/getPurchaseOrderStatus?args3=" + replace);
            JSONObject returnedObject = new JSonJava().readJsonFromUrl(serverURL + "dimo_lanka/dealer_purchase_order/getPurchaseOrderStatus?args3=" + replace);
            status = returnedObject.getInt("status");
             //System.out.println(status);

            if (status == 1) {
                HashSet<Integer> hs = new HashSet<Integer>();
                int deliverOrderValue = 0;
                JSONArray jsa = returnedObject.getJSONArray("order_data");

                for (int i = 0; i < jsa.length(); i++) {
                    JSONObject jsonObject = jsa.getJSONObject(i);
                    int orderID = jsonObject.getInt("deliver_order_id");
                    String wip = jsonObject.getString("wip_no");
                    String partNo = jsonObject.getString("item_part_no").trim();
                    double qty = jsonObject.getDouble("quantity");
                    int partID = ItemController.getItemIDforItemName(partNo);
                    double buyingPrice = Double.parseDouble(df.format(jsonObject.getDouble("selling_val")));
                    double sellingPrice = Double.parseDouble(df.format(jsonObject.getDouble("retail_val")));
                    Date date = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat();
                    sdf.applyPattern("yyyy-MM-dd");
                    String addedDate = sdf.format(date);
                    sdf.applyPattern("HH:mm:ss");
                    String addedTime = sdf.format(date);
                    String desc = jsonObject.getString("description").trim();

                    if (!hs.contains(orderID)) {
                        hs.add(orderID);
                        DeliverOrder deliverOrder = new DeliverOrder();
                        deliverOrder.setInvoicedDate(jsonObject.getString("added_date"));
                        deliverOrder.setInvoicedTime(jsonObject.getString("added_time"));
                        deliverOrder.setAmount(Double.parseDouble(df.format(jsonObject.getDouble("total_amount"))));
                        deliverOrder.setInvoiceNo(jsonObject.getString("invoice_no"));
                        deliverOrder.setWipNo(jsonObject.getString("wip_no"));
                        deliverOrder.setDueDate(jsonObject.getString("due_date"));
                        deliverOrder.setTimeStamp(jsonObject.getString("time_stamp"));
                        deliverOrder.setAdminDeliverOrderID(orderID);

                        deliverOrder.setStatus(2);
                        deliverOrderValue = DeliverOrderController.insertNewDeliverOrder(deliverOrder);

                        int lastID = DeliverOrderController.getLastInsertedDeliverOrderID(wip);
                       //System.out.println("last id " + lastID);
                        if (deliverOrderValue > 0) {
                            DeliverOrderDetail dOrderDetail = new DeliverOrderDetail();
                            dOrderDetail.setDeliverOrderID(lastID);
                            if (partID == 0) {
                                Item item = new Item(1, partNo, (buyingPrice / qty), (sellingPrice / qty), addedDate, null, desc, "-", 0,0, 0, 1, 0, 1, "0");
                                try {
                                    ItemController.addNewItem(item);
                                } catch (MySQLIntegrityConstraintViolationException micveException) {
                                    ItemController.updateItemStatus(item);
                                } catch (SQLException sQLException) {
                                }
                                partID = ItemController.getItemIDforItemName(partNo.trim());

                            }
                            dOrderDetail.setPartID(partID);
                            dOrderDetail.setAmount(buyingPrice);
                            dOrderDetail.setRetailVal(sellingPrice);
                            dOrderDetail.setQty(jsonObject.getDouble("quantity"));
                            dOrderDetail.setStatus(1);
                            DeliverOrderController.insertNewDeliverOrderDetail(dOrderDetail);
                        }
                    } else {
                        int lastID = DeliverOrderController.getLastInsertedDeliverOrderID(wip);
                        if (deliverOrderValue > 0) {
                            DeliverOrderDetail dOrderDetail = new DeliverOrderDetail();
                            dOrderDetail.setDeliverOrderID(lastID);

                            if (partID == 0) {

                                Item item = new Item(1, partNo, (buyingPrice / qty), (sellingPrice / qty), addedDate, null, desc, "-", 0, 0,0, 1, 0, 1, "0");
                                try {
                                    ItemController.addNewItem(item);
                                } catch (MySQLIntegrityConstraintViolationException micveException) {
                                    ItemController.updateItemStatus(item);
                                } catch (SQLException sQLException) {
                                }
                                partID = ItemController.getItemIDforItemName(partNo.trim());

                            }
                            dOrderDetail.setPartID(partID);
                            dOrderDetail.setAmount(buyingPrice);
                            dOrderDetail.setRetailVal(sellingPrice);
                            dOrderDetail.setQty(jsonObject.getDouble("quantity"));
                            dOrderDetail.setStatus(1);
                            DeliverOrderController.insertNewDeliverOrderDetail(dOrderDetail);
                        }
                    }

                }

//
            } else if (status == 0) {
                // JOptionPane.showMessageDialog(null, "No new deliver orders found", "Status", JOptionPane.WARNING_MESSAGE);
            }
        } catch (JSONException ex) {
            //JOptionPane.showMessageDialog(null, "Error in response", "Retry", JOptionPane.ERROR_MESSAGE);
            // ex.printStackTrace();
        } catch (IOException ex) {
            //ex.printStackTrace();

        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }

        return status;
    }

    private void placeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeActionPerformed
        try {
            if (CheckConnection.isInternetReachable()) {
                JSONObject orderData = addNewPurchaseOrder(1);
                if (orderData != null) {
                    sendPurchaseOrderAsaJson(orderData);
                    getAllPuechesOrder();
                    checkPurchaseOrderButton();
                    PurchesOrderController.autoCreatePurchaseOrder(autoCreatedDtm);
                } else {
                }

            } else {
                addNewPurchaseOrder(2);
                JOptionPane.showMessageDialog(this, "Purchase order not sent. Please try again.", "Connection error", JOptionPane.ERROR_MESSAGE);
                PurchesOrderController.loadAllUnAssignedPurchaseOrders(unAssignedDtm);
                checkPurchaseOrderButton();
               // checkRetryButton();
            }
        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (NullPointerException ex) {
            ex.printStackTrace();

        } catch (JSONException ex) {
            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            //getCompletedPurchaseOrder();
            getAllPuechesOrder();

        }
    }//GEN-LAST:event_placeActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        double discount = Double.parseDouble(lblDiscount.getText());
        if (orderTable.getSelectedRow() >= 0) {
            int selectedRow = orderTable.getSelectedRow();
            dtm2.removeRow(selectedRow);
            double tot2 = 0;
            for (int j = 0; j < dtm2.getRowCount(); j++) {
                tot2 += Double.parseDouble(dtm2.getValueAt(j, 4).toString());
            }
            lblTotalWithDiscount.setText(String.valueOf(tot2 - (tot2 * discount / 100)));
            lblTotalWithVat.setText(String.valueOf(tot2 - (tot2 * discount / 100)));
            //quntityField.setText("");
            // itemkey.requestFocus();
            calculateTotal();
            checkPurchaseOrderButton();

        } else {
            JOptionPane.showMessageDialog(null, "No items selected ", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_removeButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        //System.out.println("lk'''''''''''");
        //checkTab();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void removeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllActionPerformed
        dtm2.setRowCount(0);
        double tot2 = 0;
        for (int j = 0; j < dtm2.getRowCount(); j++) {
            tot2 += Double.parseDouble(dtm2.getValueAt(j, 4).toString());
        }
        lblTotalWithDiscount.setText(String.valueOf(tot2));
        lblTotalWithVat.setText(String.valueOf(tot2));
        //     quntityField.setText("");
//        itemkey.requestFocus();// TODO add your handling code here:
        checkPurchaseOrderButton();
        calculateTotal();
    }//GEN-LAST:event_removeAllActionPerformed

    private void btnRetrySendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrySendingActionPerformed



//////        int rowCount = tblUnAssigned.getRowCount();
//////        ArrayList values = new ArrayList();
//////        try {
//////
//////            if (CheckConnection.isInternetReachable()) {
//////                for (int i = 0; i < rowCount; i++) {
//////
//////                    int purchaseOrderID = Integer.parseInt(tblUnAssigned.getValueAt(i, 0).toString());
//////                    int value = sendPurchaseOrderAsaJson(purchaseOrderID);
//////                    values.add(value);
//////                }
//////
//////                if (rowCount == values.size() && rowCount > 0) {
//////                    JOptionPane.showMessageDialog(null, "Purchase order successfully submitted.", "Success", JOptionPane.INFORMATION_MESSAGE);
//////                    PurchesOrderController.loadAllUnAssignedPurchaseOrders(unAssignedDtm);
//////                    unAssignedDetailsDtm.setRowCount(0);
//////                    checkRetryButton();
//////                } else {
//////                    JOptionPane.showMessageDialog(null, "No purchase orders to send", "No orders", JOptionPane.INFORMATION_MESSAGE);
//////
//////                }
//////
//////                getAllPuechesOrder();
//////            } else {
//////                JOptionPane.showMessageDialog(this, "Purchase order(s) not sent. Please try again.", "Connection error", JOptionPane.ERROR_MESSAGE);
//////                PurchesOrderController.loadAllUnAssignedPurchaseOrders(unAssignedDtm);
//////            }
//////
//////        } catch (ClassNotFoundException ex) {
//////        } catch (SQLException ex) {
//////        } catch (NullPointerException ex) {
//////        } finally {
//////            getAllPuechesOrder();
//////            //getCompletedPurchaseOrder();
//////        }
////
////
    }//GEN-LAST:event_btnRetrySendingActionPerformed

    private void nameLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameLabelActionPerformed
        //itemkey.requestFocus();
    }//GEN-LAST:event_nameLabelActionPerformed

    private void removeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeMousePressed
        if (orderTable.getSelectedRow() >= 0) {
            Double discount = Double.parseDouble(lblDiscount.getText());
            int selectedRow = orderTable.getSelectedRow();
            dtm2.removeRow(selectedRow);
            double tot2 = 0;
            for (int j = 0; j < dtm2.getRowCount(); j++) {
                tot2 += Double.parseDouble(dtm2.getValueAt(j, 4).toString());
            }
            lblTotalWithDiscount.setText(String.valueOf(tot2 - (tot2 * discount / 100)));
            //quntityField.setText("");
            //itemkey.requestFocus();
            checkPurchaseOrderButton();

        } else {
            JOptionPane.showMessageDialog(null, "No items selected", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_removeMousePressed

    private void removeAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllItemActionPerformed
        dtm2.setRowCount(0);
        double tot2 = 0;
        for (int j = 0; j < dtm2.getRowCount(); j++) {
            tot2 += Double.parseDouble(dtm2.getValueAt(j, 4).toString());
        }
        lblTotalWithDiscount.setText(String.valueOf(tot2));
        //quntityField.setText("");
        //itemkey.requestFocus();// TODO add your handling code here:
        checkPurchaseOrderButton();
    }//GEN-LAST:event_removeAllItemActionPerformed

    private void retryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryActionPerformed
//        int rowCount = tblUnAssigned.getRowCount();
//        ArrayList values = new ArrayList();
//        try {
//
//            if (CheckConnection.isInternetReachable()) {
//                for (int i = 0; i < rowCount; i++) {
//
//                    int purchaseOrderID = Integer.parseInt(tblUnAssigned.getValueAt(i, 0).toString());
//                    int value = sendPurchaseOrderAsaJson(2);
//                    values.add(value);
//                }
//
//                if (rowCount == values.size()) {
//                    JOptionPane.showMessageDialog(null, "Purchase order successfully submitted.", "Success", JOptionPane.INFORMATION_MESSAGE);
//                    PurchesOrderController.loadAllUnAssignedPurchaseOrders(unAssignedDtm);
//                    unAssignedDetailsDtm.setRowCount(0);
//                }
//
//                getAllPuechesOrder();
//            } else {
//                JOptionPane.showMessageDialog(this, "Purchase order is not sent. Please try again.", "Connection Error", JOptionPane.ERROR_MESSAGE);
//                PurchesOrderController.loadAllUnAssignedPurchaseOrders(unAssignedDtm);
//            }
//
//        } catch (ClassNotFoundException ex) {
//        } catch (SQLException ex) {
//        } catch (NullPointerException ex) {
//        } finally {
//            getAllPuechesOrder();
//            getCompletedPurchaseOrder();
//       }

    }//GEN-LAST:event_retryActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        if (CheckConnection.isInternetReachable()) {
            getPurchaseOrderStatus();
        } else {
            JOptionPane.showMessageDialog(this, "Respond is not found. Please try again.", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void refreshAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshAllActionPerformed
//        int rowCount = purcheseOrderTable.getRowCount();
//        for (int i = 0; i < rowCount; i++) {
//            if ("<html><font color='red'>Pending</font></html>".equals(purcheseOrderTable.getValueAt(i, 5).toString())) {
//                int purchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(i, 0).toString());
//                int adminPoID = Integer.parseInt(purcheseOrderTable.getValueAt(i, 7).toString());
//                //getPurchaseOrderStatusOffline(purchaseOrderID, adminPoID);
//            }
//        }
//        getAllPuechesOrder();
//        getCompletedPurchaseOrder();
    }//GEN-LAST:event_refreshAllActionPerformed

    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed
        int selectedDeliveredRow = purcheseOrderTable.getSelectedRow();
        String status = purcheseOrderTable.getValueAt(selectedDeliveredRow, 5).toString();
        String acceptStatus = purcheseOrderTable.getValueAt(selectedDeliveredRow, 6).toString();
        int purchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 0).toString());
        int adminPurchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 7).toString());
        String purchaseOrderNo = purcheseOrderTable.getValueAt(selectedDeliveredRow, 1).toString();
        //DeliveredItems di = new DeliveredItems(null, true, purchaseOrderID, adminPurchaseOrderID, purchaseOrderNo, acceptStatus);
        //di.setVisible(true);
    }//GEN-LAST:event_acceptActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        PurchaseOrderParts poParts = new PurchaseOrderParts(null, true, dtm2);
        poParts.setVisible(true);
        checkPurchaseOrderButton();
        calculateTotal();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void tblGeneratedOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGeneratedOrderMouseClicked
        checkAddButtons();
    }//GEN-LAST:event_tblGeneratedOrderMouseClicked

    private void tblGeneratedOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblGeneratedOrderKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblGeneratedOrderKeyPressed

    private void btnAddPartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPartActionPerformed
        int selectedRow = tblGeneratedOrder.getSelectedRow();
        addSuggestedPartToOrder(selectedRow);
        calculateTotal();
        checkAddButtons();
        checkPurchaseOrderButton();
    }//GEN-LAST:event_btnAddPartActionPerformed

    private void btnAddAllPartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllPartsActionPerformed
        addAllPartsToOrder();
        calculateTotal();
        checkAddButtons();
        checkPurchaseOrderButton();
    }//GEN-LAST:event_btnAddAllPartsActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        if (CheckConnection.isInternetReachable()) {
            int status = getPurchaseOrderStatus();      //web aken gannwa purchase oder detalis
            checkAcceptButton();

            if (status <= 0) {
                try {
                    DeliverOrderController.loadAllDeliverOrders(dtm6);
                    JOptionPane.showMessageDialog(null, "No new deliver orders found", "Status", JOptionPane.WARNING_MESSAGE);

                } catch (ClassNotFoundException ex) {
                } catch (SQLException ex) {
                } catch (NullPointerException ex) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Respond is not found. Please try again.", "Connection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //        if (purcheseOrderTable.getSelectedRowCount() > 0) {
        //            int selectedcompleRow = purcheseOrderTable.getSelectedRow();
        //            //System.out.println(purcheseOrderTable.getValueAt(selectedcompleRow, 0) + "oid");
        //            String id = dtm6.getValueAt(selectedcompleRow, 0).toString();
        //
        //            int oid = Integer.parseInt(purcheseOrderTable.getValueAt(selectedcompleRow, 0).toString());
        //            RequestOrder requestOrder = new RequestOrder(oid);
        //            requestOrder.setVisible(true);
        //        } else {
        //            JOptionPane.showMessageDialog(null, "No rows selected", "Error", JOptionPane.ERROR_MESSAGE);
        //        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        try {
            int selectedDeliveredRow = purcheseOrderTable.getSelectedRow();
            //String status = purcheseOrderTable.getValueAt(selectedDeliveredRow, 6).toString();
            int deliverOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 0).toString().trim());
            String invoiceNo = (purcheseOrderTable.getValueAt(selectedDeliveredRow, 1).toString().trim());
            double wipNo = Double.parseDouble(purcheseOrderTable.getValueAt(selectedDeliveredRow, 2).toString().trim());
            DeliveredItems di = new DeliveredItems(new JFrame(), true, dtm6, invoiceNo, deliverOrderID, wipNo);
            di.setVisible(true);
            DeliverOrderController.loadAllDeliverOrders(dtm6);
            if (CheckConnection.isInternetReachable()) {
                try {
                    StockController.sendStockDetailsAsaJson(StockController.loadAllUnAssignedStocks());
                } catch (Exception ex) {
                }
            }
        } catch (NumberFormatException numberFormatException) {
        } catch (HeadlessException headlessException) {
        } catch (ClassNotFoundException classNotFoundException) {
        } catch (SQLException sQLException) {
        } catch (NullPointerException nullPointerException) {
        }

        //String acceptStatus = purcheseOrderTable.getValueAt(selectedDeliveredRow, 6).toString();
        //int purchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 0).toString());
        //int adminPurchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 7).toString());
        //String purchaseOrderNo = purcheseOrderTable.getValueAt(selectedDeliveredRow, 1).toString();
        // DeliveredItems di = new DeliveredItems(null, true, purchaseOrderID, adminPurchaseOrderID, purchaseOrderNo, acceptStatus);
        //di.setVisible(true);
        //        int selectedRow = purcheseOrderTable.getSelectedRow();
        //        String id = dtm6.getValueAt(selectedRow, 0).toString();
        //        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        //        String time = sdf.format(new Date());
        //        //String deliverdTime = sdf.format(time);
        //        int orderID = Integer.parseInt(id);
        //        int itemCount = deliverDetailtable.getRowCount();
        //
        //        int oid = Integer.parseInt(purcheseOrderTable.getValueAt(selectedRow, 0).toString());
        //        try {
        //            //System.out.println("Date:" + dateLabel.getText());
        //            //System.out.println("Time:" + setDateTime());
        //            int res = PurchesOrderController.addAccepetOrder(oid, dateLabel.getText(), setDateTime());
        //            if (res > 0) {
        //                Stock stock = new Stock(1, dateLabel.getText(), time, 1);
        //                int addNewStock = StockController.addNewStock(stock);
        //                if (addNewStock > 0) {
        //                    int stockID = StockController.getLastInsertedStockID();
        //                    for (int i = 0; i < itemCount; i++) {
        //                        int itemID = Integer.parseInt(deliverDetailtable.getValueAt(i, 1).toString());
        //                        int stockQty = Integer.parseInt(deliverDetailtable.getValueAt(i, 2).toString());
        //                        StockDetail sdeDetail = new StockDetail(stockID, itemID, stockQty, stockQty, 1);
        //                        int x = StockController.addNewStockDetail(sdeDetail);
        //
        //                    }
        //                    JOptionPane.showMessageDialog(this, "All Items Successfully added to the stock.", "Successful", JOptionPane.INFORMATION_MESSAGE);
        //                    getAllPuechesOrder();
        //                }
        //
        //                //JOptionPane.showMessageDialog(null, "Completed.......");
        //                autoCreatePurchaseOrder();
        //                getCompletedPurchaseOrder();
        //                getAllPuechesOrder();
        //            } else {
        //                JOptionPane.showMessageDialog(null, "Not Completed.......");
        //
        //            }
        //        } catch (ClassNotFoundException | SQLException ex) {
        //            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        //        } finally {
        //            acceptButton.setEnabled(false);
        //        }
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void purcheseOrderTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_purcheseOrderTableKeyReleased
        //        dtm7.setRowCount(0);
        //        acceptedDateLabel.setText("");
        //        adminName.setText("");
        //        newTotal.setText("");
        //        int selectedRow = purcheseOrderTable.getSelectedRow();
        //
        //        if (tmap.get(String.valueOf(purcheseOrderTable.getValueAt(selectedRow, 0).toString())).equals("Not Completed")) {
        //            acceptButton.setEnabled(false);
        ////            System.out.println(selectedRow);
        ////            System.out.println("Not Completed");
        ////            System.out.println("Not Completed 1");
        //
        //        } else {
        //            if (acceptMap.get(String.valueOf(purcheseOrderTable.getValueAt(selectedRow, 0).toString())).equals("Not Accepted")) {
        //                acceptButton.setEnabled(true);
        //                // System.out.println("Completed 2");
        //                newTotal.setText("");
        //                int selectedcompleRow = purcheseOrderTable.getSelectedRow();
        //                // System.out.println(purcheseOrderTable.getValueAt(selectedRow, 0) + "oid");
        //                String id = dtm6.getValueAt(selectedcompleRow, 0).toString();
        //
        //                int oid = Integer.parseInt(purcheseOrderTable.getValueAt(selectedcompleRow, 0).toString());
        //
        //                try {
        //                    DeliverOrderController.getDeliverOrder(oid, acceptedDateLabel, adminName);
        //                    DeliverOrderController.getall(oid, dtm7, newTotal);
        //                } catch (ClassNotFoundException | SQLException ex) {
        //                    Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        //                }
        //            } else {
        //                //System.out.println("3");
        //                newTotal.setText("");
        //                int selectedcompleRow = purcheseOrderTable.getSelectedRow();
        //                // System.out.println(purcheseOrderTable.getValueAt(selectedRow, 0) + "oid");
        //                String id = dtm6.getValueAt(selectedcompleRow, 0).toString();
        //
        //                int oid = Integer.parseInt(purcheseOrderTable.getValueAt(selectedcompleRow, 0).toString());
        //
        //                try {
        //                    DeliverOrderController.getDeliverOrder(oid, acceptedDateLabel, adminName);
        //                    DeliverOrderController.getall(oid, dtm7, newTotal);
        //                } catch (ClassNotFoundException | SQLException ex) {
        //                    Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        //                }
        //                acceptButton.setEnabled(false);
        //            }
        //
        //        }
    }//GEN-LAST:event_purcheseOrderTableKeyReleased

    private void purcheseOrderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purcheseOrderTableMouseClicked
        int clickCount = evt.getClickCount();
        if (clickCount == 2) {
            try {
                int selectedDeliveredRow = purcheseOrderTable.getSelectedRow();
                //String status = purcheseOrderTable.getValueAt(selectedDeliveredRow, 6).toString();
                int deliverOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 0).toString().trim());
                String invoiceNo = (purcheseOrderTable.getValueAt(selectedDeliveredRow, 1).toString().trim());
                double wipNo = Double.parseDouble(purcheseOrderTable.getValueAt(selectedDeliveredRow, 2).toString().trim());
                DeliveredItems di = new DeliveredItems(new JFrame(), true, dtm6, invoiceNo, deliverOrderID, wipNo);
                di.setVisible(true);
                DeliverOrderController.loadAllDeliverOrders(dtm6);
                if (CheckConnection.isInternetReachable()) {
                    try {
                        // StockController.sendStockDetailsAsaJson(StockController.loadAllUnAssignedStocks());
                    } catch (Exception ex) {
                    }
                }
            } catch (NumberFormatException numberFormatException) {
            } catch (HeadlessException headlessException) {
            } catch (ClassNotFoundException classNotFoundException) {
            } catch (SQLException sQLException) {
            } catch (NullPointerException nullPointerException) {
            }

        } else if (clickCount == 1) {
            checkAcceptButton();
        }

        //
        //        if (SwingUtilities.isRightMouseButton(evt)) {
        //            Point point = evt.getPoint();
        //            int row = purcheseOrderTable.rowAtPoint(point);
        //            purcheseOrderTable.setRowSelectionInterval(row, row);
        //            purcheseOrderTablePopup.show(purcheseOrderTable, point.x, point.y);
        //        }
        //        int selectedDeliveredRow = purcheseOrderTable.getSelectedRow();
        //        String status = purcheseOrderTable.getValueAt(selectedDeliveredRow, 5).toString();
        //        String acceptStatus = purcheseOrderTable.getValueAt(selectedDeliveredRow, 6).toString();
        //        int clickCount = evt.getClickCount();
        //        if (clickCount == 2 && "<html><font color='green'>Completed</font></html>".equals(status)) {
        //            int purchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 0).toString());
        //            int adminPurchaseOrderID = Integer.parseInt(purcheseOrderTable.getValueAt(selectedDeliveredRow, 7).toString());
        //            String purchaseOrderNo = purcheseOrderTable.getValueAt(selectedDeliveredRow, 1).toString();
        //            DeliveredItems di = new DeliveredItems(null, true, purchaseOrderID, adminPurchaseOrderID, purchaseOrderNo, acceptStatus);
        //            di.setVisible(true);
        //        } else if (clickCount == 1) {
        //            checkRefreshAcceptOrderButtons();
        //        } else {
        //
        //            dtm7.setRowCount(0);
        //            acceptedDateLabel.setText("");
        //            adminName.setText("");
        //            newTotal.setText("");
        //            int selectedRow = purcheseOrderTable.getSelectedRow();
        //
        //            if (tmap.get(String.valueOf(purcheseOrderTable.getValueAt(selectedRow, 0).toString())).equals("Not Completed")) {
        //                acceptButton.setEnabled(false);
        //
        //            } else {
        //                if (acceptMap.get(String.valueOf(purcheseOrderTable.getValueAt(selectedRow, 0).toString())).equals("Not Accepted")) {
        //                    acceptButton.setEnabled(false);
        //                    //System.out.println("Completed 2");
        //                    newTotal.setText("");
        //                    int selectedcompleRow = purcheseOrderTable.getSelectedRow();
        //                    // System.out.println(purcheseOrderTable.getValueAt(selectedRow, 0) + "oid");
        //                    String id = dtm6.getValueAt(selectedcompleRow, 0).toString();
        //
        //                    int oid = Integer.parseInt(purcheseOrderTable.getValueAt(selectedcompleRow, 0).toString());
        //
        //                    try {
        //                        DeliverOrderController.getDeliverOrder(oid, acceptedDateLabel, adminName);
        //                        DeliverOrderController.getall(oid, dtm7, newTotal);
        //                    } catch (ClassNotFoundException | SQLException ex) {
        //                        Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        //                    }
        //                } else {
        //                    //System.out.println("3");
        //                    //newTotal.setText("");
        //                    int selectedcompleRow = purcheseOrderTable.getSelectedRow();
        //                    //System.out.println(purcheseOrderTable.getValueAt(selectedRow, 0) + "oid");
        //                    String id = dtm6.getValueAt(selectedcompleRow, 0).toString();
        //
        //                    int oid = Integer.parseInt(purcheseOrderTable.getValueAt(selectedcompleRow, 0).toString());
        //
        //                    try {
        //                        DeliverOrderController.getDeliverOrder(oid, acceptedDateLabel, adminName);
        //                        DeliverOrderController.getall(oid, dtm7, newTotal);
        //                    } catch (ClassNotFoundException | SQLException ex) {
        //                        Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        //                    }
        //                    acceptButton.setEnabled(false);
        //                }
        //
        //            }
        //        }
        //
    }//GEN-LAST:event_purcheseOrderTableMouseClicked

    private void tblUnAssignedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUnAssignedMouseClicked
        if (evt.getClickCount() == 1) {
            int selectedRow = tblUnAssigned.getSelectedRow();
            String id = tblUnAssigned.getValueAt(selectedRow, 0).toString();

            int oid = Integer.parseInt(tblUnAssigned.getValueAt(selectedRow, 0).toString());
            try {
                PurchesOrderController.getallDeliveredPurchaseOrderDetail(oid, unAssignedDetailsDtm);
            } catch (ClassNotFoundException | SQLException ex) {
            }

            //-----------------------------------
        }
    }//GEN-LAST:event_tblUnAssignedMouseClicked

    private void deliveredDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_deliveredDateChooserPropertyChange
        Date d = deliveredDateChooser.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String curDate = sdf.format(d);

        try {

            final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(dtm3);
            allPurchesOrder.setRowSorter(sorter);
            sorter.setRowFilter(RowFilter.regexFilter(("(?i)" + curDate)));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_deliveredDateChooserPropertyChange

    private void notDeliveredDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_notDeliveredDateChooserPropertyChange
        Date d = notDeliveredDateChooser.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String curDate = sdf.format(d);

        try {

            final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(unAssignedDtm);
            tblUnAssigned.setRowSorter(sorter);
            sorter.setRowFilter(RowFilter.regexFilter(("(?i)" + curDate)));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_notDeliveredDateChooserPropertyChange

    private void txtInvoiceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvoiceNoKeyPressed
        String text = txtInvoiceNo.getText();

        try {

            final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(dtm6);
            purcheseOrderTable.setRowSorter(sorter);
            sorter.setRowFilter(RowFilter.regexFilter(("(?i)" + text)));
        } catch (Exception e) {
            e.printStackTrace();
        }    }//GEN-LAST:event_txtInvoiceNoKeyPressed

    private void nameLabelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameLabelKeyReleased
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(autoCreatedDtm);
        tblGeneratedOrder.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + nameLabel.getText()));
    }//GEN-LAST:event_nameLabelKeyReleased

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        jButton5.setToolTipText("add new part");
    }//GEN-LAST:event_jButton5MouseEntered

    private void removeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseEntered
        removeButton.setToolTipText("remove selected part");
    }//GEN-LAST:event_removeButtonMouseEntered

    private void removeAllMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeAllMouseEntered
        removeAll.setToolTipText("remove all parts");
    }//GEN-LAST:event_removeAllMouseEntered

    private void tblUnAssignedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblUnAssignedKeyReleased

        int selectedRow = tblUnAssigned.getSelectedRow();
        String id = tblUnAssigned.getValueAt(selectedRow, 0).toString();

        int oid = Integer.parseInt(tblUnAssigned.getValueAt(selectedRow, 0).toString());
        try {
            PurchesOrderController.getallDeliveredPurchaseOrderDetail(oid, unAssignedDetailsDtm);
        } catch (ClassNotFoundException | SQLException ex) {
        }

            //-----------------------------------

    }//GEN-LAST:event_tblUnAssignedKeyReleased

    private void purcheseOrderTableAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_purcheseOrderTableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_purcheseOrderTableAncestorMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem accept;
    private javax.swing.JButton acceptButton;
    private javax.swing.JTable allPurchesOrder;
    private javax.swing.JButton btnAddAllParts;
    private javax.swing.JButton btnAddPart;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JPanel btnReprint;
    private javax.swing.JButton btnRetrySending;
    private javax.swing.JTable datailTable;
    private javax.swing.JTable deliverDetailtable;
    private com.toedter.calendar.JDateChooser deliveredDateChooser;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel lblDiscount;
    private static javax.swing.JLabel lblTotalWithDiscount;
    private static javax.swing.JLabel lblTotalWithVat;
    private javax.swing.JLabel lblVat;
    private javax.swing.JTextField nameLabel;
    private com.toedter.calendar.JDateChooser notDeliveredDateChooser;
    private javax.swing.JTable orderTable;
    private javax.swing.JPopupMenu orderTablePopup;
    private javax.swing.JButton place;
    private javax.swing.JTable purcheseOrderTable;
    private javax.swing.JPopupMenu purcheseOrderTablePopup;
    private javax.swing.JMenuItem refresh;
    private javax.swing.JMenuItem refreshAll;
    private javax.swing.JMenuItem remove;
    private javax.swing.JButton removeAll;
    private javax.swing.JMenuItem removeAllItem;
    private javax.swing.JButton removeButton;
    private javax.swing.JMenuItem retry;
    private views.suggest.SuggestPanel suggestPanel1;
    private javax.swing.JTable tblGeneratedOrder;
    private javax.swing.JTable tblUnAssigned;
    private javax.swing.JPopupMenu tblUnAssignedPopup;
    private javax.swing.JTable tblUnAssinedDetails;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JMenuItem update;
    // End of variables declaration//GEN-END:variables

//    private static void getAllItem() {
//        dtm.setRowCount(0);
//        try {
//            ArrayList<Item> allItem = ItemController.getAllItem();
//            for (Item i : allItem) {
////                System.out.println(i.getQuantity() + "new");
////                System.out.println("Name:" + i.getItemName());
//                Object row[] = {i.getItemID(), i.getItemName(), i.getItemDesc(), i.getBuyingPrice(), i.getRemainingQty(), i.getReOrderQty()};
//
//                dtm.addRow(row);
//                //dtm9.addRow(row);
//
//            }
//        } catch (ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
//    private String setDateTime() {
//        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
//        String year = timeStamp.substring(0, 4);
//        String month = timeStamp.substring(4, 6);
//        String date = timeStamp.substring(6, 8);
//        String hour = timeStamp.substring(9, 11);
//        String minute = timeStamp.substring(11, 13);
//        String second = timeStamp.substring(13, 15);
//
//        String systemDate = year + "-" + month + "-" + date;
//        dateLabel.setText(systemDate);
//        //dateLabel1.setText(systemDate);
//        String systemTime = hour + ":" + minute + ":" + second;
//        return systemTime;
//    }
    public static synchronized void getAllPuechesOrder() {
        dtm3.setRowCount(0);

        try {
            ArrayList<PurchesOrder> allPercherseOrder = PurchesOrderController.getAllPercherseOrder();
            for (PurchesOrder p : allPercherseOrder) {
                Object[] row = {p.getId(), p.getPurchaseOrderNumber(), p.getDate(), p.getTime(), p.getFinalAmount()};
                dtm3.addRow(row);
                allPuMap.put(String.valueOf(p.getId()), String.valueOf(p.getId()));

            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void getCompletedPurchaseOrder() {
        dtm6.setRowCount(0);
        try {
            ArrayList<PurchesOrder> allPercherseOrder = PurchesOrderController.getAllPercherseOrder();

            for (PurchesOrder p : allPercherseOrder) {
                if (p.getComplete() == 0) {

                    JLabel jLabel = new JLabel("<html><font color='red'>Pending</font></html>");
                    tmap.put(String.valueOf(p.getId()), "Not Completed");

                    JLabel jLabel2 = new JLabel("<html><font color='red'>Pending</font></html>");

                    acceptMap.put(String.valueOf(p.getId()), "Not Accepted");

                    Object[] row2 = {p.getId(), p.getPurchaseOrderNumber(), p.getDate(),/* p.getLastupdatedate(),*/ p.getTotal(), jLabel.getText(), jLabel2.getText(), p.getAdminPuchaseOrderID()};
                    dtm6.addRow(row2);
                } else if (p.getComplete() == 2) {

                    JLabel jLabel = new JLabel("<html><font color='blue'>Rejected</font></html>");
                    tmap.put(String.valueOf(p.getId()), "Not Completed");

                    JLabel jLabel2 = new JLabel("<html><font color='blue'>---</font></html>");

                    acceptMap.put(String.valueOf(p.getId()), "Not Accepted");

                    Object[] row2 = {p.getId(), p.getPurchaseOrderNumber(), p.getDate(), p.getTotal(), jLabel.getText(), jLabel2.getText(), p.getAdminPuchaseOrderID()};
                    dtm6.addRow(row2);
                } else {
                    if (p.getAccepttodatabase() == 0) {
                        JLabel jLabel = new JLabel("<html><font color='green'>Completed</font></html>");
                        tmap.put(String.valueOf(p.getId()), "Completed");

                        JLabel jLabel2 = new JLabel("<html><font color='red'>Pending</font></html>");

                        acceptMap.put(String.valueOf(p.getId()), "Not Accepted");

                        Object[] row2 = {p.getId(), p.getPurchaseOrderNumber(), p.getDate(), /*p.getLastupdatedate(),*/ p.getTotal(), jLabel.getText(), jLabel2.getText(), p.getAdminPuchaseOrderID()};
                        dtm6.addRow(row2);

                    } else {
                        JLabel jLabel = new JLabel("<html><font color='green'>Completed</font></html>");
                        tmap.put(String.valueOf(p.getId()), "Completed");

                        JLabel jLabel2 = new JLabel("<html><font color='green'>Accepted</font></html>");

                        acceptMap.put(String.valueOf(p.getId()), "Accepted");

                        Object[] row2 = {p.getId(), p.getPurchaseOrderNumber(), p.getDate(),/* p.getLastupdatedate(), */ p.getTotal(), jLabel.getText(), jLabel2.getText(), p.getAdminPuchaseOrderID()};
                        dtm6.addRow(row2);
                    }

                }
                //---------------------------------------------------------------------//

            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
//    private void checkTab() {
//        PurchesOrder purchesOrder;
//        try {
//            purchesOrder = PurchesOrderController.getAcceptedPurchaseOrder();
//            if (purchesOrder.getComplete() == 1 & purchesOrder.getAccepttodatabase() == 1) {
//                itemkey.setEnabled(true);
//                selectItem.setEnabled(true);
//                quntityField.setEnabled(true);
//                addButon.setEnabled(true);
//                removeButton.setEnabled(true);
//                removeAll.setEnabled(true);
//                orderTable.setEnabled(true);
//                place.setEnabled(true);
//                
//                //----------------------Auto--------------------------------//
//                itemkeyauto.set
//            } else {
//                itemkey.setEnabled(false);
//                selectItem.setEnabled(false);
//                quntityField.setEnabled(false);
//                addButon.setEnabled(false);
//                removeButton.setEnabled(false);
//                removeAll.setEnabled(false);
//                orderTable.setEnabled(false);
//                place.setEnabled(false);
//            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(PerchusOrder.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
}
